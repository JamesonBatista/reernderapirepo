let contador = 1;

// Definindo a fun√ß√£o que incrementa o contador
function count() {
  return `             ‚Äãüá™‚Äã‚Äãüá≥‚Äã‚Äãüá©‚Äã‚Äãüáµ‚Äã‚Äãüá¥‚Äã‚ÄãüáÆ‚Äã‚Äãüá≥‚Äã‚Äãüáπ‚Äã:  ${contador++} `;
}
function getFormattedDateTime() {
  const now = new Date();

  const day = String(now.getDate()).padStart(2, '0');
  const month = String(now.getMonth() + 1).padStart(2, '0'); // getMonth() retorna o m√™s de 0 a 11, por isso adicionamos 1
  const year = now.getFullYear();

  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');

  return `${day}/${month}/${year} ${hours}:${minutes}`;
}
const local = "http://localhost:3000/"

const swaggerDocument = {
  openapi: "3.0.3",
  info: {
    version: "1.0.0",
    title: `QAs trainamentos || last reset: ${getFormattedDateTime()}`,
    description:
      "`A princ√≠pio na primeira chamada pode acontecer um erro, por tempo de inatividade, mas tente novamente.`\n\n Nesse Swagger voc√™ consegue validar e passar por v√°rios cen√°rios de testes, tente validar o m√°ximo de JSONs, e boa sorte.\n\nEste swagger √© postado na Render, ainda n√£o temos um servidor em nuvem para melhorar a qualidade do servi√ßo, mas em breve faremos isso.\n\n criado por:\n\n `Jam Batista`  [LinkedIn](https://www.linkedin.com/in/jam-batista-98101015b/)\n\n `Gabriel Lopes`  [LinkedIn](https://www.linkedin.com/in/gabriel-lopes-500b71269/)\n\nLogin: \n\n username: admin \n\npassword: password\n\n**Informa√ß√µes**:\n- Os endpoints de POST ter√£o limite de 50 registros, depois disso os 10 primeiros ser√£o deletados.  \n(POST endpoints will have a limit of 50 records, after which the first 10 will be deleted.)\n\n- Alguns endpoint de POST fazem envios de emails, olhe na descri√ß√£o.  \n(Some POST endpoints send emails, look at the description.)\n\n `Com o tempo, iremos adicionar mais desafios e JSONs para valida√ß√µes.`\n\n\nTotal: `170` endpoints.",
  },

  components: {
    securitySchemes: {
      bearerAuth: {
        type: "http",
        scheme: "bearer",
        bearerFormat: "JWT",
      },
    },
  },
  security: [
    {
      bearerAuth: [],
    },
  ],
  servers: [
    {
      url: local,
    },
  ],
  tags: [
    {
      name: "Login",
      description: "Login simples e login hard validation",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Users",
      description: "Simula√ß√£o de cria√ß√£o de usuarios",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Challenger",
      description: "Desafios praticando automa√ß√£o de testes em endpoints",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Others",
      description: "JSONs variados para valida√ß√µes",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "CRUD",
      description: "GET, POST, GET:ID, DELETE",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Shop",
      description: "Simula√ß√£o de compra",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Bank",
      description: "Simula√ß√£o de pedido de emprestimo e compra de item de luxo",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Projetos",
      description: "Simula√ß√£o de cria√ß√£o de configura√ß√£o um projeto",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Payments",
      description: "Simula√ß√£o de compra e pagamento em cart√£o",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Company",
      description:
        "Simula√ß√£o de cria√ß√£o de Empresa, Funcion√°rios, Produtos, e Servi√ßos",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Mercado",
      description: "Simula√ß√£o de cria√ß√£o de Mercado, produtos, e subcategorias",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Eventos",
      description: "Simula√ß√£o de cria√ß√£o de Eventos, e ades√£o de participantes",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Heroes",
      description: "Simula√ß√£o de cria√ß√£o de h√©rois",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
    {
      name: "Animes",
      description: "Simula√ß√£o de cria√ß√£o de Animes",
      externalDocs: { description: "Swagger.io", url: "http://swagger.io" },
    },
  ],
  paths: {
    "/login": {
      post: {
        tags: ["Login"],
        summary: ` Generate new Bearer token   ${count()}`,
        description: "Endpoint to generate a new token",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  username: {
                    type: "string",
                    default: "admin",
                    description: "Nome de usu√°rio para autentica√ß√£o",
                  },
                  password: {
                    type: "string",
                    default: "password",
                    description: "Senha para autentica√ß√£o",
                  },
                },
                required: ["username", "password"],
                example: {
                  username: "admin",
                  password: "password",
                },
              },
            },
          },
        },
        responses: {
          201: {
            description: "Authentication successful",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    token: {
                      type: "string",
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Invalid username or password",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    error: {
                      type: "string",
                      example: "Invalid credentials provided.",
                    },
                  },
                },
              },
            },
          },
          401: {
            description: "Unauthorized",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    error: {
                      type: "string",
                      example: "Authentication failed.",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/login-hard": {
      post: {
        tags: ["Login"],
        summary: `Generate hard-token ${count()} `,
        description: "Endpoint to generate a new token",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  username: {
                    type: "string",
                    default: "admin",
                    description: "Nome de usu√°rio para autentica√ß√£o",
                  },
                  password: {
                    type: "string",
                    default: "password",
                    description: "Senha para autentica√ß√£o",
                  },
                },
                required: ["username", "password"],
                example: {
                  username: "admin",
                  password: "password",
                },
              },
            },
          },
        },
        responses: {
          201: {
            description: "Authentication successful",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    token: {
                      type: "string",
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Invalid username or password",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    error: {
                      type: "string",
                      example: "Invalid credentials provided.",
                    },
                  },
                },
              },
            },
          },
          401: {
            description: "Unauthorized",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    error: {
                      type: "string",
                      example: "Authentication failed.",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/users": {
      post: {
        tags: ["Users"],
        summary: "Create a new user " + count(),
        description: "Creates a new user with the given details",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "User object to be created",
            required: true,
            schema: {
              type: "object",
              properties: {
                name: {
                  type: "string",
                },
                last_name: {
                  type: "string",
                },
                email: {
                  type: "string",
                },
              },
              required: ["name", "last_name", "email"],
            },
          },
        ],
        responses: {
          201: {
            description: "User created successfully",
            schema: {
              type: "object",
              properties: {
                id: {
                  type: "integer",
                },
                name: {
                  type: "string",
                },
                last_name: {
                  type: "string",
                },
                email: {
                  type: "string",
                },
              },
            },
          },
        },
      },
      get: {
        tags: ["Users"],
        summary: "Get all users " + count(),
        description: "Returns a list of all users",
        produces: ["application/json"],
        responses: {
          200: {
            description: "A list of users",
            schema: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  id: {
                    type: "integer",
                  },
                  name: {
                    type: "string",
                  },
                  last_name: {
                    type: "string",
                  },
                  email: {
                    type: "string",
                  },
                },
              },
            },
          },
        },
      },
    },
    "/users/{id}": {
      get: {
        tags: ["Users"],
        summary: "Get a user by ID " + count(),
        description: "Returns a single user",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of the user to fetch",
            required: true,
            type: "integer",
          },
        ],
        responses: {
          200: {
            description: "A single user",
            schema: {
              type: "object",
              properties: {
                id: {
                  type: "integer",
                },
                name: {
                  type: "string",
                },
                last_name: {
                  type: "string",
                },
                email: {
                  type: "string",
                },
              },
            },
          },
          404: {
            description: "User not found",
          },
        },
      },
      put: {
        tags: ["Users"],
        summary: "Update a user by ID " + count(),
        description: "Updates the details of a user",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of the user to update",
            required: true,
            type: "integer",
          },
          {
            in: "body",
            name: "body",
            description: "User object with updated details",
            required: true,
            schema: {
              type: "object",
              properties: {
                name: {
                  type: "string",
                },
                last_name: {
                  type: "string",
                },
                email: {
                  type: "string",
                },
              },
            },
          },
        ],
        responses: {
          200: {
            description: "User updated successfully",
            schema: {
              type: "object",
              properties: {
                id: {
                  type: "integer",
                },
                name: {
                  type: "string",
                },
                last_name: {
                  type: "string",
                },
                email: {
                  type: "string",
                },
              },
            },
          },
          404: {
            description: "User not found",
          },
        },
      },
      delete: {
        tags: ["Users"],
        summary: "Delete a user by ID " + count(),
        description: "Deletes a user from the system",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of the user to delete",
            required: true,
            type: "integer",
          },
        ],
        responses: {
          200: {
            description: "User deleted successfully",
          },
          404: {
            description: "User not found",
          },
        },
      },
    },
    "/json_1": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 1 " + count(),
        description:
          "Este endpoint valida um JSON contendo informa√ß√µes de usu√°rio e intera√ß√µes em um sistema de e-commerce, conforme as seguintes regras:\n¬ß\nProdutos:\nCada produto deve ter um 'id' √∫nico e um 'nome' n√£o vazio.\nO 'preco' de cada produto deve ser um n√∫mero positivo.\nO campo 'disponivel' deve ser um booleano indicando se o produto est√° dispon√≠vel ou n√£o.\n\nUsu√°rio:\nO usu√°rio deve ter um 'nome' n√£o vazio.\nA 'idade' do usu√°rio deve ser um n√∫mero positivo.\nO 'email' do usu√°rio deve estar em um formato v√°lido.\n\nConfigura√ß√µes:\nO campo 'notificacoes' deve ser um booleano.\nO campo 'tema' deve ser uma string n√£o vazia.\nO campo 'idioma' deve ser uma string n√£o vazia.\n\nEndere√ßo:\nO campo 'rua' deve ser uma string n√£o vazia.\nO campo 'numero' deve ser um n√∫mero positivo.\nO campo 'cidade' deve ser uma string n√£o vazia.\nO campo 'estado' deve ser uma string de dois caracteres representando a sigla do estado.\nO campo 'cep' deve estar em um formato v√°lido.\n\nHist√≥rico de Pedidos:\nCada pedido deve ter um 'pedidoId' √∫nico.\nO campo 'produto' deve corresponder ao nome de um dos produtos listados.\nO campo 'quantidade' deve ser um n√∫mero inteiro positivo.\nO campo 'precoTotal' deve ser um n√∫mero positivo.\n\nCarrinho Atual:\nCada produto no carrinho deve ter um 'produtoId' correspondente a um dos produtos listados.\nA 'quantidade' de cada produto no carrinho deve ser um n√∫mero inteiro positivo.\nO 'precoTotal' do carrinho deve ser um n√∫mero positivo.\n\nM√©todo de Pagamento:\nPara o m√©todo de pagamento por cart√£o, o 'numero' do cart√£o deve estar em um formato v√°lido.\nA 'validade' do cart√£o deve estar em um formato v√°lido (MM/AAAA).\nO 'cvv' do cart√£o deve ser um c√≥digo de tr√™s ou quatro d√≠gitos.\n\nContato:\nO campo 'telefone' deve estar em um formato v√°lido.\nO campo 'emailSecundario', se fornecido, deve estar em um formato v√°lido.\n\n√öltima Compra:\nA 'data' da √∫ltima compra deve estar em um formato v√°lido (AAAA-MM-DD).\nO 'valor' da √∫ltima compra deve ser um n√∫mero positivo.\nO campo 'produto' deve corresponder ao nome de um dos produtos listados.\n\nRecomenda√ß√µes:\nO campo 'preco' de cada recomenda√ß√£o deve ser um n√∫mero positivo.\n\nEstat√≠sticas de Uso:\nO campo 'horasConectado' deve ser um n√∫mero positivo.\nO campo 'diasAtivo' deve ser um n√∫mero positivo.\n\nAmigos:\nCada amigo deve ter um 'nome' n√£o vazio.\nO campo 'contato' de cada amigo, se fornecido, deve estar em um formato v√°lido.\n\nPrefer√™ncias:\nO campo 'categoriasFavoritas' deve ser uma lista n√£o vazia de strings.\nO campo 'notificarPromocoes' deve ser um booleano.",
        parameters: [
          {
            name: "body",
            in: "body",
            description: "JSON a ser validado",
            schema: {
              type: "object",
              properties: {
                produtos: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: { type: "integer" },
                      nome: { type: "string" },
                      preco: { type: "number" },
                      disponivel: { type: "boolean" },
                    },
                  },
                },
                usuario: {
                  type: "object",
                  properties: {
                    nome: { type: "string" },
                    idade: { type: "integer" },
                    email: { type: "string" },
                  },
                },
                configuracoes: {
                  type: "object",
                  properties: {
                    notificacoes: { type: "boolean" },
                    tema: { type: "string" },
                    idioma: { type: "string" },
                  },
                },
                endereco: {
                  type: "object",
                  properties: {
                    rua: { type: "string" },
                    numero: { type: "integer" },
                    cidade: { type: "string" },
                    estado: { type: "string" },
                    cep: { type: "string" },
                  },
                },
                historicoDePedidos: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      pedidoId: { type: "integer" },
                      produto: { type: "string" },
                      quantidade: { type: "integer" },
                      precoTotal: { type: "number" },
                    },
                  },
                },
                carrinhoAtual: {
                  type: "object",
                  properties: {
                    produtos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          produtoId: { type: "integer" },
                          quantidade: { type: "integer" },
                        },
                      },
                    },
                    precoTotal: { type: "number" },
                  },
                },
                metodoDePagamento: {
                  type: "object",
                  properties: {
                    cartao: {
                      type: "object",
                      properties: {
                        numero: { type: "string" },
                        validade: { type: "string" },
                        cvv: { type: "string" },
                      },
                    },
                  },
                },
                contato: {
                  type: "object",
                  properties: {
                    telefone: { type: "string" },
                    emailSecundario: { type: "string" },
                  },
                },
                assinaturaNewsletter: { type: "boolean" },
                ultimaCompra: {
                  type: "object",
                  properties: {
                    data: { type: "string" },
                    valor: { type: "number" },
                    produto: { type: "string" },
                  },
                },
                recomendacoes: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      produto: { type: "string" },
                      preco: { type: "number" },
                    },
                  },
                },
                perfilPublico: { type: "boolean" },
                estatisticasDeUso: {
                  type: "object",
                  properties: {
                    horasConectado: { type: "integer" },
                    diasAtivo: { type: "integer" },
                  },
                },
                amigos: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      nome: { type: "string" },
                      contato: { type: "string" },
                    },
                  },
                },
                preferencias: {
                  type: "object",
                  properties: {
                    categoriasFavoritas: {
                      type: "array",
                      items: { type: "string" },
                    },
                    notificarPromocoes: { type: "boolean" },
                  },
                },
              },
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 1 successful",
          },
        },
      },
    },
    "/json_2": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 2 " + count(),
        description:
          "Desafio de Valida√ß√£o:\n\n1. Verifique se o nome do usu√°rio est√° presente e n√£o est√° vazio.\n2. Certifique-se de que a idade do usu√°rio √© um n√∫mero positivo.\n3. Valide os endere√ßos de e-mail do usu√°rio principal e secund√°rio.\n4. Garanta que o n√∫mero de telefone do usu√°rio esteja em um formato v√°lido.\n5. Verifique se a rua, cidade e estado do endere√ßo est√£o preenchidos e n√£o vazios.\n6. Certifique-se de que o n√∫mero do endere√ßo √© um n√∫mero positivo.\n7. Valide o formato do CEP.\n8. Verifique se o tema e idioma das prefer√™ncias est√£o preenchidos e n√£o vazios.\n9. Certifique-se de que h√° pelo menos uma categoria favorita nas prefer√™ncias.\n10. Verifique se a op√ß√£o de notificar promo√ß√µes est√° definida como um booleano.\n11. Valide os pedidos no hist√≥rico de compras:\n    a. Garanta que cada pedido tenha um ID √∫nico.\n    b. Verifique se cada item de pedido tem um ID de produto, nome, quantidade e pre√ßo.\n    c. Certifique-se de que o total do pedido √© um n√∫mero positivo.\n    d. Valide o formato da data do pedido.\n12. Verifique se a assinatura da newsletter est√° definida como um booleano.\n13. Certifique-se de que a op√ß√£o de receber SMS est√° definida como um booleano.\n14. Valide os m√©todos de pagamento:\n    a. Para o cart√£o de cr√©dito, verifique se o n√∫mero do cart√£o est√° em um formato v√°lido.\n    b. Verifique se a data de validade do cart√£o est√° em um formato v√°lido.\n    c. Certifique-se de que o CVV do cart√£o √© um c√≥digo de tr√™s ou quatro d√≠gitos.\n    d. Para o PayPal, verifique se o e-mail est√° em um formato v√°lido.\n15. Certifique-se de que as horas conectadas e os dias ativos nas estat√≠sticas de uso s√£o n√∫meros positivos.\n16. Valide o formato da data do √∫ltimo login.\n17. Certifique-se de que cada amigo tenha um nome n√£o vazio e um formato de contato v√°lido.\n18. Verifique se cada recomenda√ß√£o de produto tem um ID de produto, nome e pre√ßo.\n\nSe todas essas valida√ß√µes forem bem-sucedidas, o JSON estar√° corretamente estruturado e pronto para ser processado pelo sistema de e-commerce.",
        parameters: [
          {
            name: "body",
            in: "body",
            description: "JSON a ser validado",
            schema: {
              type: "object",
              properties: {
                usuario: {
                  type: "object",
                  properties: {
                    informacoesPessoais: {
                      type: "object",
                      properties: {
                        nome: {
                          type: "string",
                        },
                        idade: {
                          type: "number",
                        },
                        contatos: {
                          type: "object",
                          properties: {
                            emailPrincipal: {
                              type: "string",
                            },
                            emailSecundario: {
                              type: "string",
                            },
                            telefone: {
                              type: "string",
                            },
                          },
                          required: [
                            "emailPrincipal",
                            "emailSecundario",
                            "telefone",
                          ],
                        },
                        endereco: {
                          type: "object",
                          properties: {
                            rua: {
                              type: "string",
                            },
                            numero: {
                              type: "number",
                            },
                            complemento: {
                              type: "string",
                            },
                            cidade: {
                              type: "string",
                            },
                            estado: {
                              type: "string",
                            },
                            cep: {
                              type: "string",
                            },
                          },
                          required: [
                            "rua",
                            "numero",
                            "complemento",
                            "cidade",
                            "estado",
                            "cep",
                          ],
                        },
                      },
                      required: ["nome", "idade", "contatos", "endereco"],
                    },
                    preferencias: {
                      type: "object",
                      properties: {
                        tema: {
                          type: "string",
                        },
                        idioma: {
                          type: "string",
                        },
                        categoriasFavoritas: {
                          type: "array",
                          items: {
                            type: "string",
                          },
                        },
                        notificarPromocoes: {
                          type: "boolean",
                        },
                      },
                      required: [
                        "tema",
                        "idioma",
                        "categoriasFavoritas",
                        "notificarPromocoes",
                      ],
                    },
                    historicoDeCompras: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          pedidoId: {
                            type: "number",
                          },
                          itens: {
                            type: "array",
                            items: {
                              type: "object",
                              properties: {
                                produtoId: {
                                  type: "number",
                                },
                                nome: {
                                  type: "string",
                                },
                                quantidade: {
                                  type: "number",
                                },
                                preco: {
                                  type: "number",
                                },
                              },
                              required: [
                                "produtoId",
                                "nome",
                                "quantidade",
                                "preco",
                              ],
                            },
                          },
                          total: {
                            type: "number",
                          },
                          data: {
                            type: "string",
                          },
                        },
                        required: ["pedidoId", "itens", "total", "data"],
                      },
                    },
                    configuracoesDeConta: {
                      type: "object",
                      properties: {
                        assinaturaNewsletter: {
                          type: "boolean",
                        },
                        receberSMS: {
                          type: "boolean",
                        },
                        metodosDePagamento: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              tipo: {
                                type: "string",
                              },
                              detalhes: {
                                type: "object",
                                properties: {
                                  numero: {
                                    type: "string",
                                  },
                                  validade: {
                                    type: "string",
                                  },
                                  cvv: {
                                    type: "string",
                                  },
                                },
                                required: ["numero", "validade", "cvv"],
                              },
                              email: {
                                type: "string",
                              },
                            },
                            required: ["tipo"],
                          },
                        },
                      },
                      required: [
                        "assinaturaNewsletter",
                        "receberSMS",
                        "metodosDePagamento",
                      ],
                    },
                    estatisticasDeUso: {
                      type: "object",
                      properties: {
                        horasConectado: {
                          type: "number",
                        },
                        diasAtivo: {
                          type: "number",
                        },
                        logins: {
                          type: "object",
                          properties: {
                            ultimoLogin: {
                              type: "string",
                            },
                            dispositivosUsados: {
                              type: "array",
                              items: {
                                type: "object",
                                properties: {
                                  tipo: {
                                    type: "string",
                                  },
                                  modelo: {
                                    type: "string",
                                  },
                                },
                                required: ["tipo", "modelo"],
                              },
                            },
                          },
                          required: ["ultimoLogin", "dispositivosUsados"],
                        },
                      },
                      required: ["horasConectado", "diasAtivo", "logins"],
                    },
                    amigos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          nome: {
                            type: "string",
                          },
                          contato: {
                            type: "string",
                          },
                        },
                        required: ["nome", "contato"],
                      },
                    },
                    recomendacoesDeProdutos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          produtoId: {
                            type: "number",
                          },
                          nome: {
                            type: "string",
                          },
                          preco: {
                            type: "number",
                          },
                        },
                        required: ["produtoId", "nome", "preco"],
                      },
                    },
                  },
                  required: [
                    "informacoesPessoais",
                    "preferencias",
                    "historicoDeCompras",
                    "configuracoesDeConta",
                    "estatisticasDeUso",
                    "amigos",
                    "recomendacoesDeProdutos",
                  ],
                },
              },
              required: ["usuario"],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 2 successful",
          },
        },
      },
    },
    "/json_3": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 3 " + count(),
        description:
          "Valida√ß√£o do JSON para a 'Confer√™ncia de Tecnologia 2024'. Verifique: \n1. Estrutura: Confirma√ß√£o de todas as chaves principais e sub-chaves corretas em cada se√ß√£o do JSON. \n2. Conte√∫do e Dados: Verifica√ß√£o da exatid√£o dos dados de local, data, organizadores, programa√ß√£o, participantes, feedbacks e sustentabilidade. \n3. Rela√ß√µes e L√≥gica: Confirma√ß√£o de que participantes est√£o inscritos em sess√µes existentes, feedbacks associados corretamente, e avalia√ß√µes dentro da escala v√°lida. \n4. Sustentabilidade: Verificar a corretude das pol√≠ticas e parceiros listados. ",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                evento: {
                  type: "object",
                  properties: {
                    nome: {
                      type: "string",
                    },
                    local: {
                      type: "object",
                      properties: {
                        nome: {
                          type: "string",
                        },
                        endereco: {
                          type: "object",
                          properties: {
                            rua: {
                              type: "string",
                            },
                            cidade: {
                              type: "string",
                            },
                            estado: {
                              type: "string",
                            },
                            cep: {
                              type: "string",
                            },
                          },
                          required: ["rua", "cidade", "estado", "cep"],
                        },
                      },
                      required: ["nome", "endereco"],
                    },
                    data: {
                      type: "string",
                    },
                    organizadores: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          nome: {
                            type: "string",
                          },
                          contato: {
                            type: "string",
                          },
                        },
                        required: ["nome", "contato"],
                      },
                    },
                    programacao: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          dia: {
                            type: "string",
                          },
                          sessoes: {
                            type: "array",
                            items: {
                              type: "object",
                              properties: {
                                titulo: {
                                  type: "string",
                                },
                                horario: {
                                  type: "string",
                                },
                                palestrante: {
                                  type: "string",
                                },
                                sala: {
                                  type: "string",
                                },
                                descricao: {
                                  type: "string",
                                },
                              },
                              required: [
                                "titulo",
                                "horario",
                                "palestrante",
                                "sala",
                                "descricao",
                              ],
                            },
                          },
                        },
                        required: ["dia", "sessoes"],
                      },
                    },
                    participantes: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          nome: {
                            type: "string",
                          },
                          email: {
                            type: "string",
                          },
                          tipo: {
                            type: "string",
                          },
                          sessoesInscritas: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                        required: ["nome", "email", "tipo", "sessoesInscritas"],
                      },
                    },
                    feedbacks: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          sessao: {
                            type: "string",
                          },
                          comentarios: {
                            type: "array",
                            items: {
                              type: "object",
                              properties: {
                                participante: {
                                  type: "string",
                                },
                                comentario: {
                                  type: "string",
                                },
                                avaliacao: {
                                  type: "number",
                                },
                              },
                              required: [
                                "participante",
                                "comentario",
                                "avaliacao",
                              ],
                            },
                          },
                        },
                        required: ["sessao", "comentarios"],
                      },
                    },
                    sustentabilidade: {
                      type: "object",
                      properties: {
                        politicas: {
                          type: "array",
                          items: {
                            type: "string",
                          },
                        },
                        parceiros: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              nome: {
                                type: "string",
                              },
                              contato: {
                                type: "string",
                              },
                            },
                            required: ["nome", "contato"],
                          },
                        },
                      },
                      required: ["politicas", "parceiros"],
                    },
                  },
                  required: [
                    "nome",
                    "local",
                    "data",
                    "organizadores",
                    "programacao",
                    "participantes",
                    "feedbacks",
                    "sustentabilidade",
                  ],
                },
              },
              required: ["evento"],
            },
          },
        ],

        responses: {
          200: {
            description: "Challenger Automation 3 successful",
          },
        },
      },
    },
    "/json_4": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 4 " + count(),
        description:
          "4 - Desafio de Valida√ß√£o Verificar a consist√™ncia das linguas e tradicionalVestimenta entre as culturas para garantir que n√£o haja duplicatas no mesmo continente e que cada cultura esteja associada a apenas uma regi√£o.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                linguagensDeProgramacao: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "number",
                      },
                      nome: {
                        type: "string",
                      },
                      criador: {
                        type: "object",
                        properties: {
                          nome: {
                            type: "string",
                          },
                          nacionalidade: {
                            type: "string",
                          },
                        },
                        required: ["nome", "nacionalidade"],
                      },
                      ano: {
                        type: "number",
                      },
                      paradigmas: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      aplicacoes: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      validacoesEspecificas: {
                        type: "object",
                        properties: {
                          formatoNome: {
                            type: "string",
                          },
                          anoMinimo: {
                            type: "number",
                          },
                        },
                        required: ["formatoNome", "anoMinimo"],
                      },
                    },
                    required: [
                      "id",
                      "nome",
                      "criador",
                      "ano",
                      "paradigmas",
                      "aplicacoes",
                      "validacoesEspecificas",
                    ],
                  },
                },
                etnologia: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "number",
                      },
                      continente: {
                        type: "string",
                      },
                      culturas: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            id: {
                              type: "number",
                            },
                            nome: {
                              type: "string",
                            },
                            lingua: {
                              type: "string",
                            },
                            tradicionalVestimenta: {
                              type: "string",
                            },
                            rituais: {
                              type: "array",
                              items: {
                                type: "string",
                              },
                            },
                            validacoesEspecificas: {
                              type: "object",
                              properties: {
                                linguaFormato: {
                                  type: "string",
                                },
                                numeroDeRituais: {
                                  type: "object",
                                  properties: {
                                    min: {
                                      type: "number",
                                    },
                                    max: {
                                      type: "number",
                                    },
                                  },
                                  required: ["min", "max"],
                                },
                              },
                              required: ["linguaFormato", "numeroDeRituais"],
                            },
                          },
                          required: [
                            "id",
                            "nome",
                            "lingua",
                            "tradicionalVestimenta",
                            "rituais",
                            "validacoesEspecificas",
                          ],
                        },
                      },
                    },
                    required: ["id", "continente", "culturas"],
                  },
                },
                validacaoGlobal: {
                  type: "object",
                  properties: {
                    idsUnicos: {
                      type: "boolean",
                    },
                    referenciaCruzada: {
                      type: "object",
                      properties: {
                        linguagensCulturas: {
                          type: "object",
                          properties: {
                            1: {
                              type: "array",
                              items: {
                                type: "string",
                              },
                            },
                            2: {
                              type: "array",
                              items: {
                                type: "string",
                              },
                            },
                          },
                          required: ["1", "2"],
                        },
                      },
                      required: ["linguagensCulturas"],
                    },
                  },
                  required: ["idsUnicos", "referenciaCruzada"],
                },
              },
              required: [
                "linguagensDeProgramacao",
                "etnologia",
                "validacaoGlobal",
              ],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 4 successful",
          },
        },
      },
    },
    "/json_5": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 5 " + count(),
        description:
          "5 - Desafio de Valida√ß√£o Assegurar que cada id nos projetos, equipes, e tarefas seja √∫nico dentro de toda a estrutura do JSON e que o status de cada tarefa esteja em concord√¢ncia com as depend√™ncias de outras tarefas dentro da mesma equipe.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                empresa: {
                  type: "object",
                  properties: {
                    nome: {
                      type: "string",
                    },
                    setores: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "number",
                          },
                          nome: {
                            type: "string",
                          },
                          projetos: {
                            type: "array",
                            items: {
                              type: "object",
                              properties: {
                                id: {
                                  type: "number",
                                },
                                nome: {
                                  type: "string",
                                },
                                linguagensUsadas: {
                                  type: "array",
                                  items: {
                                    type: "object",
                                    properties: {
                                      id: {
                                        type: "number",
                                      },
                                      nome: {
                                        type: "string",
                                      },
                                      versao: {
                                        type: "string",
                                      },
                                    },
                                    required: ["id", "nome", "versao"],
                                  },
                                },
                                inicio: {
                                  type: "string",
                                },
                                prazo: {
                                  type: "string",
                                },
                                status: {
                                  type: "string",
                                },
                                equipes: {
                                  type: "array",
                                  items: {
                                    type: "object",
                                    properties: {
                                      id: {
                                        type: "number",
                                      },
                                      nome: {
                                        type: "string",
                                      },
                                      membros: {
                                        type: "array",
                                        items: {
                                          type: "object",
                                          properties: {
                                            id: {
                                              type: "number",
                                            },
                                            nome: {
                                              type: "string",
                                            },
                                            cargo: {
                                              type: "string",
                                            },
                                          },
                                          required: ["id", "nome", "cargo"],
                                        },
                                      },
                                      tarefas: {
                                        type: "array",
                                        items: {
                                          type: "object",
                                          properties: {
                                            id: {
                                              type: "number",
                                            },
                                            descricao: {
                                              type: "string",
                                            },
                                            status: {
                                              type: "string",
                                            },
                                          },
                                          required: [
                                            "id",
                                            "descricao",
                                            "status",
                                          ],
                                        },
                                      },
                                    },
                                    required: [
                                      "id",
                                      "nome",
                                      "membros",
                                      "tarefas",
                                    ],
                                  },
                                },
                              },
                              required: [
                                "id",
                                "nome",
                                "linguagensUsadas",
                                "inicio",
                                "prazo",
                                "status",
                                "equipes",
                              ],
                            },
                          },
                        },
                        required: ["id", "nome", "projetos"],
                      },
                    },
                  },
                  required: ["nome", "setores"],
                },
              },
              required: ["empresa"],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 5 successful",
          },
        },
      },
    },
    "/json_6": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 6 " + count(),
        description:
          "Valida√ß√£o de l√≥gica e consist√™ncia para a 'Ag√™ncia Espacial Internacional'. O desafio inclui: \n1. Consist√™ncia de Lan√ßamentos: Verifica√ß√£o de que cada sat√©lite est√° associado a um ve√≠culo lan√ßador com capacidade suficiente e que ve√≠culos 'ativos' t√™m miss√µes associadas. \n2. Temporalidade e Status: Garantir que todas as miss√µes 'ativas' t√™m datas passadas e que itens 'em prepara√ß√£o' t√™m lan√ßamentos futuros. \n3. Rela√ß√µes de Dados: Coer√™ncia entre sat√©lites e miss√µes quanto aos ve√≠culos usados, e uso de ve√≠culos lan√ßadores ativos para opera√ß√µes planejadas. \n4. Coer√™ncia de Miss√£o: As miss√µes tripuladas devem ter astronautas apropriados; miss√µes n√£o tripuladas devem ter objetivos compat√≠veis.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                agenciaEspacial: {
                  type: "string",
                },
                veiculosLancadores: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                      },
                      nome: {
                        type: "string",
                      },
                      capacidadeCarga: {
                        type: "string",
                      },
                      primeiroLancamento: {
                        type: "string",
                      },
                      status: {
                        type: "string",
                      },
                    },
                    required: [
                      "id",
                      "nome",
                      "capacidadeCarga",
                      "primeiroLancamento",
                      "status",
                    ],
                  },
                },
                satelites: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                      },
                      nome: {
                        type: "string",
                      },
                      tipo: {
                        type: "string",
                      },
                      veiculoLancadorId: {
                        type: "string",
                      },
                      status: {
                        type: "string",
                      },
                    },
                    required: [
                      "id",
                      "nome",
                      "tipo",
                      "veiculoLancadorId",
                      "status",
                    ],
                  },
                },
                missoes: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                      },
                      nome: {
                        type: "string",
                      },
                      tipo: {
                        type: "string",
                      },
                      veiculoLancadorId: {
                        type: "string",
                      },
                      tripulacao: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                            },
                            nome: {
                              type: "string",
                            },
                          },
                          required: ["id", "nome"],
                        },
                      },
                      objetivos: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      status: {
                        type: "string",
                      },
                    },
                    required: [
                      "id",
                      "nome",
                      "tipo",
                      "veiculoLancadorId",
                      "objetivos",
                      "status",
                    ],
                  },
                },
              },
              required: [
                "agenciaEspacial",
                "veiculosLancadores",
                "satelites",
                "missoes",
              ],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 6 successful",
          },
        },
      },
    },
    "/json_7": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 7 " + count(),
        description:
          "Consist√™ncia de Equipes: Assegurar que todas as equipes mencionadas nos jogos estejam listadas nas equipes participantes do torneio correspondente. Isso envolve verificar se as equipes de cada jogo realmente pertencem ao grupo listado para o ano correspondente. \n\n Resultados Corretos: Validar que os resultados dos jogos refletem de forma precisa os gols marcados, verificando tamb√©m que n√£o existam discrep√¢ncias nos dados dos jogos, como uma equipe sendo listada como vencedora mas com menos gols que o advers√°rio.\n\nCapacidade dos Est√°dios: Verificar que a capacidade dos est√°dios listada para cada Copa do Mundo seja consistente ou maior do que a capacidade registrada em Copas anteriores, assegurando uma valida√ß√£o temporal de dados.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                copasDoMundo: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      ano: {
                        type: "number",
                      },
                      paisSede: {
                        type: "string",
                      },
                      estadios: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            nome: {
                              type: "string",
                            },
                            cidade: {
                              type: "string",
                            },
                            capacidade: {
                              type: "number",
                            },
                          },
                          required: ["nome", "cidade", "capacidade"],
                        },
                      },
                      equipes: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            nome: {
                              type: "string",
                            },
                            grupo: {
                              type: "string",
                            },
                          },
                          required: ["nome", "grupo"],
                        },
                      },
                      jogos: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            data: {
                              type: "string",
                            },
                            estadio: {
                              type: "string",
                            },
                            equipes: {
                              type: "array",
                              items: {
                                type: "string",
                              },
                            },
                            resultado: {
                              type: "object",
                              properties: {
                                Brasil: {
                                  type: "number",
                                },
                                Su√≠√ßa: {
                                  type: "number",
                                },
                                Fran√ßa: {
                                  type: "number",
                                },
                                Austr√°lia: {
                                  type: "number",
                                },
                                Alemanha: {
                                  type: "number",
                                },
                                "Coreia do Sul": {
                                  type: "number",
                                },
                                Argentina: {
                                  type: "number",
                                },
                                M√©xico: {
                                  type: "number",
                                },
                              },
                              required: [],
                            },
                          },
                          required: ["data", "estadio", "equipes", "resultado"],
                        },
                      },
                    },
                    required: [
                      "ano",
                      "paisSede",
                      "estadios",
                      "equipes",
                      "jogos",
                    ],
                  },
                },
              },
              required: ["copasDoMundo"],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 7 successful",
          },
        },
      },
    },
    "/json_8": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 8 " + count(),
        description:
          "Disponibilidade de Quartos: Certificar que os quartos de hotel listados nas reservas estejam dispon√≠veis nas datas especificadas pela reserva do cliente, sem sobreposi√ß√£o com outras reservas.\n\nCompatibilidade de Reservas: Garantir que as datas e locais de voos, hot√©is, e ve√≠culos se alinhem de forma l√≥gica. Por exemplo, um cliente n√£o pode reservar um voo que chega em Londres e imediatamente depois um carro em Paris sem um voo intermedi√°rio.\n\nPre√ßo Total da Reserva: Verificar o pre√ßo total de cada reserva, incluindo todos os voos, estadias em hot√©is e loca√ß√µes de ve√≠culos para garantir que o total cobrado est√° correto e que todas as taxas est√£o inclu√≠das.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                sistemaDeReservas: {
                  type: "object",
                  properties: {
                    voos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                          },
                          companhia: {
                            type: "string",
                          },
                          origem: {
                            type: "string",
                          },
                          destino: {
                            type: "string",
                          },
                          partida: {
                            type: "string",
                          },
                          chegada: {
                            type: "string",
                          },
                          preco: {
                            type: "number",
                          },
                        },
                        required: [
                          "id",
                          "companhia",
                          "origem",
                          "destino",
                          "partida",
                          "chegada",
                          "preco",
                        ],
                      },
                    },
                    hoteis: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                          },
                          nome: {
                            type: "string",
                          },
                          cidade: {
                            type: "string",
                          },
                          quartosDisponiveis: {
                            type: "array",
                            items: {
                              type: "object",
                              properties: {
                                tipo: {
                                  type: "string",
                                },
                                precoPorNoite: {
                                  type: "number",
                                },
                                capacidade: {
                                  type: "number",
                                },
                              },
                              required: ["tipo", "precoPorNoite", "capacidade"],
                            },
                          },
                        },
                        required: [
                          "id",
                          "nome",
                          "cidade",
                          "quartosDisponiveis",
                        ],
                      },
                    },
                    veiculos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                          },
                          tipo: {
                            type: "string",
                          },
                          modelo: {
                            type: "string",
                          },
                          localRetirada: {
                            type: "string",
                          },
                          precoPorDia: {
                            type: "number",
                          },
                          disponibilidade: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                        required: [
                          "id",
                          "tipo",
                          "modelo",
                          "localRetirada",
                          "precoPorDia",
                          "disponibilidade",
                        ],
                      },
                    },
                  },
                  required: ["voos", "hoteis", "veiculos"],
                },
                reservas: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      cliente: {
                        type: "string",
                      },
                      itensReservados: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            tipo: {
                              type: "string",
                            },
                            id: {
                              type: "string",
                            },
                            quarto: {
                              type: "string",
                            },
                            dias: {
                              type: "array",
                              items: {
                                type: "string",
                              },
                            },
                          },
                          required: ["tipo", "id"],
                        },
                      },
                    },
                    required: ["cliente", "itensReservados"],
                  },
                },
              },
              required: ["sistemaDeReservas", "reservas"],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 8 successful",
          },
        },
      },
    },
    "/json_9": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 9 " + count(),
        description:
          "Desafio de Valida√ß√£o Complexo: Total de Gols: Calcule o total de gols marcados pelo Brasil ao longo dos sete jogos da Copa do Mundo.\n\n Total de Faltas: Determine o total de faltas cometidas pela equipe brasileira durante toda a competi√ß√£o.\n\n Total de Cart√µes: Conte quantos cart√µes amarelos e vermelhos foram recebidos pelos jogadores do Brasil durante os sete jogos.\n\nDesafio de Relat√≥rios Detalhados: Crie uma fun√ß√£o que processe o JSON dos jogos do Brasil na Copa do Mundo e retorne um relat√≥rio detalhado para cada jogo, incluindo: - Total de gols marcados pelo Brasil e pelos advers√°rios. - Nomes dos jogadores que marcaram gols para o Brasil e para os advers√°rios, juntamente com os minutos em que os gols foram marcados. - Total de faltas cometidas pelo Brasil e pelos advers√°rios. - Nomes dos jogadores que cometeram faltas para o Brasil e para os advers√°rios, juntamente com os minutos em que as faltas ocorreram. - Total de cart√µes (amarelos e vermelhos) recebidos pelo Brasil e pelos advers√°rios. - Nomes dos jogadores que receberam cart√µes para o Brasil e para os advers√°rios, juntamente com os minutos em que os cart√µes foram mostrados.\nDesafio de Estat√≠sticas: - Calcule a m√©dia de gols por jogo marcados pelo Brasil e pelos advers√°rios. - Identifique o jogo com o maior n√∫mero de gols. - Determine o jogador brasileiro com mais gols ao longo da competi√ß√£o.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                copaDoMundo: {
                  type: "object",
                  properties: {
                    jogosDoBrasil: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "number",
                          },
                          adversario: {
                            type: "string",
                          },
                          resultado: {
                            type: "string",
                          },
                          placar: {
                            type: "string",
                          },
                          detalhes: {
                            type: "object",
                            properties: {
                              gols: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    jogador: {
                                      type: "string",
                                    },
                                    minuto: {
                                      type: "number",
                                    },
                                  },
                                  required: ["jogador", "minuto"],
                                },
                              },
                              faltas: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    jogador: {
                                      type: "string",
                                    },
                                    minuto: {
                                      type: "number",
                                    },
                                  },
                                  required: ["jogador", "minuto"],
                                },
                              },
                              cartoes: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    jogador: {
                                      type: "string",
                                    },
                                    tipo: {
                                      type: "string",
                                    },
                                    minuto: {
                                      type: "number",
                                    },
                                  },
                                  required: ["jogador", "tipo", "minuto"],
                                },
                              },
                            },
                            required: ["gols", "faltas", "cartoes"],
                          },
                        },
                        required: [
                          "id",
                          "adversario",
                          "resultado",
                          "placar",
                          "detalhes",
                        ],
                      },
                    },
                  },
                  required: ["jogosDoBrasil"],
                },
              },
              required: ["copaDoMundo"],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 9 successful",
          },
        },
      },
    },
    "/json_10": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 10 " + count(),
        description: "Desafio de Valida√ß√£o Complexo: Encontrar todos os campos",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "array",
              items: {
                type: "object",
                properties: {
                  users: {
                    type: "array",
                    items: {
                      type: "object",
                      properties: {
                        main: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              intro: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    title: {
                                      type: "string",
                                    },
                                    description: {
                                      type: "string",
                                    },
                                    primeira_camada: {
                                      type: "array",
                                      items: {
                                        type: "object",
                                        properties: {
                                          segunda_camada: {
                                            type: "array",
                                            items: {
                                              type: "object",
                                              properties: {
                                                title_segunda_camada: {
                                                  type: "string",
                                                },
                                                terceira_camada: {
                                                  type: "array",
                                                  items: {
                                                    type: "object",
                                                    properties: {
                                                      title_terceira_camada: {
                                                        type: "string",
                                                      },
                                                      quarta_camada: {
                                                        type: "array",
                                                        items: {
                                                          type: "object",
                                                          properties: {
                                                            title_quarta_camada:
                                                              {
                                                                type: "string",
                                                              },
                                                            objeto_quarta_camada:
                                                              {
                                                                type: "object",
                                                                properties: {
                                                                  title: {
                                                                    type: "string",
                                                                  },
                                                                  objeto_da_quarta_camada:
                                                                    {
                                                                      type: "object",
                                                                      properties:
                                                                        {
                                                                          title:
                                                                            {
                                                                              type: "string",
                                                                            },
                                                                          terceiro_objeto_da_camada:
                                                                            {
                                                                              type: "string",
                                                                            },
                                                                        },
                                                                      required:
                                                                        [
                                                                          "title",
                                                                          "terceiro_objeto_da_camada",
                                                                        ],
                                                                    },
                                                                },
                                                                required: [
                                                                  "title",
                                                                  "objeto_da_quarta_camada",
                                                                ],
                                                              },
                                                            quinta_camada: {
                                                              type: "array",
                                                              items: {
                                                                type: "object",
                                                                properties: {
                                                                  title: {
                                                                    type: "string",
                                                                  },
                                                                  intro_quinta_camada:
                                                                    {
                                                                      type: "array",
                                                                      items: {
                                                                        type: "object",
                                                                        properties:
                                                                          {
                                                                            title:
                                                                              {
                                                                                type: "string",
                                                                              },
                                                                          },
                                                                        required:
                                                                          [
                                                                            "title",
                                                                          ],
                                                                      },
                                                                    },
                                                                  sexta_camada:
                                                                    {
                                                                      type: "array",
                                                                      items: {
                                                                        type: "object",
                                                                        properties:
                                                                          {
                                                                            title:
                                                                              {
                                                                                type: "string",
                                                                              },
                                                                            intro_sexta_camada:
                                                                              {
                                                                                type: "object",
                                                                                properties:
                                                                                  {
                                                                                    array_sexta_camada:
                                                                                      {
                                                                                        type: "array",
                                                                                        items:
                                                                                          {
                                                                                            type: "object",
                                                                                            properties:
                                                                                              {
                                                                                                title:
                                                                                                  {
                                                                                                    type: "string",
                                                                                                  },
                                                                                                objeto_sexta_camada:
                                                                                                  {
                                                                                                    type: "object",
                                                                                                    properties:
                                                                                                      {
                                                                                                        title:
                                                                                                          {
                                                                                                            type: "string",
                                                                                                          },
                                                                                                      },
                                                                                                    required:
                                                                                                      [
                                                                                                        "title",
                                                                                                      ],
                                                                                                  },
                                                                                                title_sem_objeto:
                                                                                                  {
                                                                                                    type: "string",
                                                                                                  },
                                                                                              },
                                                                                            required:
                                                                                              [],
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                required:
                                                                                  [
                                                                                    "array_sexta_camada",
                                                                                  ],
                                                                              },
                                                                          },
                                                                        required:
                                                                          [],
                                                                      },
                                                                    },
                                                                },
                                                                required: [],
                                                              },
                                                            },
                                                          },
                                                          required: [],
                                                        },
                                                      },
                                                    },
                                                    required: [],
                                                  },
                                                },
                                              },
                                              required: [],
                                            },
                                          },
                                        },
                                        required: ["segunda_camada"],
                                      },
                                    },
                                  },
                                  required: [],
                                },
                              },
                            },
                            required: ["intro"],
                          },
                        },
                      },
                      required: ["main"],
                    },
                  },
                },
                required: ["users"],
              },
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 10 successful",
          },
        },
      },
    },
    "/json_11": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 11 " + count(),
        description: "Desafio de Valida√ß√£o Complexo: Encontrar todos os campos",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                user_info: {
                  type: "object",
                  properties: {
                    address: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          primary_address: {
                            type: "object",
                            properties: {
                              house: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    room: {
                                      type: "object",
                                      properties: {
                                        items: {
                                          type: "object",
                                          properties: {
                                            "item-1": {
                                              type: "string",
                                            },
                                            "item-2": {
                                              type: "string",
                                            },
                                          },
                                          required: ["item-1", "item-2"],
                                        },
                                        bad: {
                                          type: "array",
                                          items: {
                                            type: "object",
                                            properties: {
                                              sanders: {
                                                type: "object",
                                                properties: {
                                                  airPlane: {
                                                    type: "array",
                                                    items: {
                                                      type: "object",
                                                      properties: {
                                                        id: {
                                                          type: "number",
                                                        },
                                                        name: {
                                                          type: "string",
                                                        },
                                                        Brooks: {
                                                          type: "array",
                                                          items: {
                                                            type: "object",
                                                            properties: {
                                                              books: {
                                                                type: "array",
                                                                items: {
                                                                  type: "object",
                                                                  properties: {
                                                                    result_final:
                                                                      {
                                                                        type: "object",
                                                                        properties:
                                                                          {
                                                                            value:
                                                                              {
                                                                                type: "string",
                                                                              },
                                                                          },
                                                                        required:
                                                                          [
                                                                            "value",
                                                                          ],
                                                                      },
                                                                  },
                                                                  required: [
                                                                    "result_final",
                                                                  ],
                                                                },
                                                              },
                                                            },
                                                            required: ["books"],
                                                          },
                                                        },
                                                      },
                                                      required: [],
                                                    },
                                                  },
                                                },
                                                required: ["airPlane"],
                                              },
                                            },
                                            required: ["sanders"],
                                          },
                                        },
                                      },
                                      required: ["items", "bad"],
                                    },
                                  },
                                  required: ["room"],
                                },
                              },
                            },
                            required: ["house"],
                          },
                        },
                        required: ["primary_address"],
                      },
                    },
                  },
                  required: ["address"],
                },
              },
              required: ["user_info"],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 11 successful",
          },
        },
      },
    },
    "/json_12": {
      get: {
        tags: ["Challenger"],
        summary: "Open challenger 12 " + count(),
        description:
          "Imprimir de acordo com o valor quais carros cada usu√°rio pode comprar ex: Eu sou Wood tenho 400000 e posso comprar um Dynamics Pink MAS, se ele for VIP Informe quais carro ele tamb√©m tem direito. Fazer isso para Todos. Validar os endere√ßos da Loja e o ceo.",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                produtos: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "number",
                      },
                      nome: {
                        type: "string",
                      },
                      preco: {
                        type: "number",
                      },
                      disponivel: {
                        type: "boolean",
                      },
                    },
                    required: ["id", "nome", "preco", "disponivel"],
                  },
                },
                usuario: {
                  type: "object",
                  properties: {
                    nome: {
                      type: "string",
                    },
                    idade: {
                      type: "number",
                    },
                    email: {
                      type: "string",
                    },
                  },
                  required: ["nome", "idade", "email"],
                },
                configuracoes: {
                  type: "object",
                  properties: {
                    notificacoes: {
                      type: "boolean",
                    },
                    tema: {
                      type: "string",
                    },
                    idioma: {
                      type: "string",
                    },
                  },
                  required: ["notificacoes", "tema", "idioma"],
                },
                endereco: {
                  type: "object",
                  properties: {
                    rua: {
                      type: "string",
                    },
                    numero: {
                      type: "number",
                    },
                    cidade: {
                      type: "string",
                    },
                    estado: {
                      type: "string",
                    },
                    cep: {
                      type: "string",
                    },
                  },
                  required: ["rua", "numero", "cidade", "estado", "cep"],
                },
                historicoDePedidos: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      pedidoId: {
                        type: "number",
                      },
                      produto: {
                        type: "string",
                      },
                      quantidade: {
                        type: "number",
                      },
                      precoTotal: {
                        type: "number",
                      },
                    },
                    required: [
                      "pedidoId",
                      "produto",
                      "quantidade",
                      "precoTotal",
                    ],
                  },
                },
                carrinhoAtual: {
                  type: "object",
                  properties: {
                    produtos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          produtoId: {
                            type: "number",
                          },
                          quantidade: {
                            type: "number",
                          },
                        },
                        required: ["produtoId", "quantidade"],
                      },
                    },
                    precoTotal: {
                      type: "number",
                    },
                  },
                  required: ["produtos", "precoTotal"],
                },
                metodoDePagamento: {
                  type: "object",
                  properties: {
                    cartao: {
                      type: "object",
                      properties: {
                        numero: {
                          type: "string",
                        },
                        validade: {
                          type: "string",
                        },
                        cvv: {
                          type: "string",
                        },
                      },
                      required: ["numero", "validade", "cvv"],
                    },
                  },
                  required: ["cartao"],
                },
                contato: {
                  type: "object",
                  properties: {
                    telefone: {
                      type: "string",
                    },
                    emailSecundario: {
                      type: "string",
                    },
                  },
                  required: ["telefone", "emailSecundario"],
                },
                assinaturaNewsletter: {
                  type: "boolean",
                },
                ultimaCompra: {
                  type: "object",
                  properties: {
                    data: {
                      type: "string",
                    },
                    valor: {
                      type: "number",
                    },
                    produto: {
                      type: "string",
                    },
                  },
                  required: ["data", "valor", "produto"],
                },
                recomendacoes: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      produto: {
                        type: "string",
                      },
                      preco: {
                        type: "number",
                      },
                    },
                    required: ["produto", "preco"],
                  },
                },
                perfilPublico: {
                  type: "boolean",
                },
                estatisticasDeUso: {
                  type: "object",
                  properties: {
                    horasConectado: {
                      type: "number",
                    },
                    diasAtivo: {
                      type: "number",
                    },
                  },
                  required: ["horasConectado", "diasAtivo"],
                },
                amigos: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      nome: {
                        type: "string",
                      },
                      contato: {
                        type: "string",
                      },
                    },
                    required: ["nome", "contato"],
                  },
                },
                preferencias: {
                  type: "object",
                  properties: {
                    categoriasFavoritas: {
                      type: "array",
                      items: {
                        type: "string",
                      },
                    },
                    notificarPromocoes: {
                      type: "boolean",
                    },
                  },
                  required: ["categoriasFavoritas", "notificarPromocoes"],
                },
              },
              required: [
                "produtos",
                "usuario",
                "configuracoes",
                "endereco",
                "historicoDePedidos",
                "carrinhoAtual",
                "metodoDePagamento",
                "contato",
                "assinaturaNewsletter",
                "ultimaCompra",
                "recomendacoes",
                "perfilPublico",
                "estatisticasDeUso",
                "amigos",
                "preferencias",
              ],
            },
          },
        ],
        responses: {
          200: {
            description: "Challenger Automation 12 successful",
          },
        },
      },
    },
    "/all-jsons-data": {
      post: {
        tags: ["Challenger"],
        summary: "Valida os dados de entrada" + count(),
        description:
          "Verifica se os dados enviados correspondem aos conjuntos de dados v√°lidos e pr√©-definidos. Extrair e enviar via post um dado pedido de cada JSON anterior. json_1, json_2 ...",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  produtoId: {
                    type: "integer",
                    description:
                      "ID do produto, deve corresponder a um ID v√°lido existente.",
                  },
                  usuarioEmail: {
                    type: "string",
                    format: "email",
                    description:
                      "Email do usu√°rio, deve corresponder a um email v√°lido existente.",
                  },
                  eventoNome: {
                    type: "string",
                    description:
                      "Nome do evento, deve corresponder a um nome de evento v√°lido existente.",
                  },
                  linguagemNome: {
                    type: "string",
                    description:
                      "Nome da linguagem de programa√ß√£o, deve corresponder a uma linguagem v√°lida existente.",
                  },
                  empresaProjetoId: {
                    type: "integer",
                    description:
                      "ID do projeto da empresa, deve corresponder a um ID de projeto v√°lido existente.",
                  },
                  agenciaVeiculoId: {
                    type: "string",
                    description:
                      "ID do ve√≠culo lan√ßador, deve corresponder a um ID v√°lido existente.",
                  },
                  copaAno: {
                    type: "integer",
                    description:
                      "Ano da Copa do Mundo, deve corresponder a um ano v√°lido existente.",
                  },
                  vooId: {
                    type: "string",
                    description:
                      "ID do voo, deve corresponder a um ID de voo v√°lido existente.",
                  },
                  jogoId: {
                    type: "integer",
                    description:
                      "ID do jogo do Brasil, deve corresponder a um ID de jogo v√°lido existente.",
                  },
                  required: [
                    "produtoId",
                    "usuarioEmail",
                    "eventoNome",
                    "linguagemNome",
                    "empresaProjetoId",
                    "agenciaVeiculoId",
                    "copaAno",
                    "vooId",
                    "jogoId",
                  ],
                },
              },
            },
          },
          responses: {
            200: {
              description:
                "Valida√ß√£o bem-sucedida, todos os dados est√£o corretos.",
              content: {
                "text/plain": {
                  schema: {
                    type: "string",
                    example:
                      "Todos os dados informados s√£o v√°lidos e foram verificados com sucesso.",
                  },
                },
              },
            },
            400: {
              description: "Erro de valida√ß√£o",
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      message: {
                        type: "string",
                        description:
                          "Mensagem detalhada sobre o erro de valida√ß√£o.",
                      },
                    },
                    example: {
                      message:
                        "Erro de valida√ß√£o: produtoId must be one of [1, 2, 3]",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/infinity-array": {
      get: {
        tags: ["Challenger"],
        summary: "JSON 10 camadas de aray" + count(),
        description: "JSON para treino de valida√ß√£o",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                layers: {
                  type: "array",
                  items: {
                    type: "array",
                    items: {
                      type: "array",
                      items: {
                        type: "array",
                        items: {
                          type: "array",
                          items: {
                            type: "array",
                            items: {
                              type: "array",
                              items: {
                                type: "array",
                                items: {
                                  type: "array",
                                  items: {
                                    type: "array",
                                    items: {
                                      type: "object",
                                      properties: {
                                        success: {
                                          type: "string",
                                        },
                                      },
                                      required: ["success"],
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              required: ["layers"],
            },
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/deep-validation": {
      get: {
        tags: ["Challenger"],
        summary: "JSON com profundidade de valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "object",
              properties: {
                empresa: {
                  type: "object",
                  properties: {
                    departamentos: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          nome: {
                            type: "string",
                          },
                          funcionarios: {
                            type: "array",
                            items: {
                              type: "object",
                              properties: {
                                nome: {
                                  type: "string",
                                },
                                cargo: {
                                  type: "string",
                                },
                                projetos: {
                                  type: "array",
                                  items: {
                                    type: "object",
                                    properties: {
                                      nome: {
                                        type: "string",
                                      },
                                      responsavel: {
                                        type: "object",
                                        properties: {
                                          nome: {
                                            type: "string",
                                          },
                                          cargo: {
                                            type: "string",
                                          },
                                        },
                                        required: ["nome", "cargo"],
                                      },
                                      tarefas: {
                                        type: "array",
                                        items: {
                                          type: "object",
                                          properties: {
                                            descricao: {
                                              type: "string",
                                            },
                                            responsavel: {
                                              type: "object",
                                              properties: {
                                                nome: {
                                                  type: "string",
                                                },
                                                cargo: {
                                                  type: "string",
                                                },
                                              },
                                              required: ["nome", "cargo"],
                                            },
                                          },
                                          required: [
                                            "descricao",
                                            "responsavel",
                                          ],
                                        },
                                      },
                                    },
                                    required: [
                                      "nome",
                                      "responsavel",
                                      "tarefas",
                                    ],
                                  },
                                },
                              },
                              required: ["nome", "cargo", "projetos"],
                            },
                          },
                        },
                        required: ["nome", "funcionarios"],
                      },
                    },
                  },
                  required: ["departamentos"],
                },
              },
              required: ["empresa"],
            },
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/germany-api": {
      get: {
        tags: ["Others"],
        summary: "JSON com profundidade de valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {
              $schema: "http://json-schema.org/draft-07/schema#",
              title: "Generated schema for Root",
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: {
                    type: "object",
                    properties: {
                      common: {
                        type: "string",
                      },
                      official: {
                        type: "string",
                      },
                      nativeName: {
                        type: "object",
                        properties: {
                          deu: {
                            type: "object",
                            properties: {
                              official: {
                                type: "string",
                              },
                              common: {
                                type: "string",
                              },
                            },
                            required: ["official", "common"],
                          },
                        },
                        required: ["deu"],
                      },
                    },
                    required: ["common", "official", "nativeName"],
                  },
                  tld: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  cca2: {
                    type: "string",
                  },
                  ccn3: {
                    type: "string",
                  },
                  cca3: {
                    type: "string",
                  },
                  cioc: {
                    type: "string",
                  },
                  independent: {
                    type: "boolean",
                  },
                  status: {
                    type: "string",
                  },
                  unMember: {
                    type: "boolean",
                  },
                  currencies: {
                    type: "object",
                    properties: {
                      EUR: {
                        type: "object",
                        properties: {
                          name: {
                            type: "string",
                          },
                          symbol: {
                            type: "string",
                          },
                        },
                        required: ["name", "symbol"],
                      },
                    },
                    required: ["EUR"],
                  },
                  idd: {
                    type: "object",
                    properties: {
                      root: {
                        type: "string",
                      },
                      suffixes: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                    },
                    required: ["root", "suffixes"],
                  },
                  capital: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  altSpellings: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  region: {
                    type: "string",
                  },
                  subregion: {
                    type: "string",
                  },
                  languages: {
                    type: "object",
                    properties: {
                      deu: {
                        type: "string",
                      },
                    },
                    required: ["deu"],
                  },
                  translations: {
                    type: "object",
                    properties: {
                      ara: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      bre: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      ces: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      cym: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      deu: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      est: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      fin: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      fra: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      hrv: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      hun: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      ita: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      jpn: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      kor: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      nld: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      per: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      pol: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      por: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      rus: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      slk: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      spa: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      srp: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      swe: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      tur: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      urd: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                      zho: {
                        type: "object",
                        properties: {
                          official: {
                            type: "string",
                          },
                          common: {
                            type: "string",
                          },
                        },
                        required: ["official", "common"],
                      },
                    },
                    required: [
                      "ara",
                      "bre",
                      "ces",
                      "cym",
                      "deu",
                      "est",
                      "fin",
                      "fra",
                      "hrv",
                      "hun",
                      "ita",
                      "jpn",
                      "kor",
                      "nld",
                      "per",
                      "pol",
                      "por",
                      "rus",
                      "slk",
                      "spa",
                      "srp",
                      "swe",
                      "tur",
                      "urd",
                      "zho",
                    ],
                  },
                  latlng: {
                    type: "array",
                    items: {
                      type: "number",
                    },
                  },
                  landlocked: {
                    type: "boolean",
                  },
                  borders: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  area: {
                    type: "number",
                  },
                  demonyms: {
                    type: "object",
                    properties: {
                      eng: {
                        type: "object",
                        properties: {
                          f: {
                            type: "string",
                          },
                          m: {
                            type: "string",
                          },
                        },
                        required: ["f", "m"],
                      },
                      fra: {
                        type: "object",
                        properties: {
                          f: {
                            type: "string",
                          },
                          m: {
                            type: "string",
                          },
                        },
                        required: ["f", "m"],
                      },
                    },
                    required: ["eng", "fra"],
                  },
                  flag: {
                    type: "string",
                  },
                  maps: {
                    type: "object",
                    properties: {
                      googleMaps: {
                        type: "string",
                      },
                      openStreetMaps: {
                        type: "string",
                      },
                    },
                    required: ["googleMaps", "openStreetMaps"],
                  },
                  population: {
                    type: "number",
                  },
                  gini: {
                    type: "object",
                    properties: {
                      2016: {
                        type: "number",
                      },
                    },
                    required: ["2016"],
                  },
                  fifa: {
                    type: "string",
                  },
                  car: {
                    type: "object",
                    properties: {
                      signs: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      side: {
                        type: "string",
                      },
                    },
                    required: ["signs", "side"],
                  },
                  timezones: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  continents: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  flags: {
                    type: "object",
                    properties: {
                      png: {
                        type: "string",
                      },
                      svg: {
                        type: "string",
                      },
                      alt: {
                        type: "string",
                      },
                    },
                    required: ["png", "svg", "alt"],
                  },
                  coatOfArms: {
                    type: "object",
                    properties: {
                      png: {
                        type: "string",
                      },
                      svg: {
                        type: "string",
                      },
                    },
                    required: ["png", "svg"],
                  },
                  startOfWeek: {
                    type: "string",
                  },
                  capitalInfo: {
                    type: "object",
                    properties: {
                      latlng: {
                        type: "array",
                        items: {
                          type: "number",
                        },
                      },
                    },
                    required: ["latlng"],
                  },
                  postalCode: {
                    type: "object",
                    properties: {
                      format: {
                        type: "string",
                      },
                      regex: {
                        type: "string",
                      },
                    },
                    required: ["format", "regex"],
                  },
                },
                required: [
                  "name",
                  "tld",
                  "cca2",
                  "ccn3",
                  "cca3",
                  "cioc",
                  "independent",
                  "status",
                  "unMember",
                  "currencies",
                  "idd",
                  "capital",
                  "altSpellings",
                  "region",
                  "subregion",
                  "languages",
                  "translations",
                  "latlng",
                  "landlocked",
                  "borders",
                  "area",
                  "demonyms",
                  "flag",
                  "maps",
                  "population",
                  "gini",
                  "fifa",
                  "car",
                  "timezones",
                  "continents",
                  "flags",
                  "coatOfArms",
                  "startOfWeek",
                  "capitalInfo",
                  "postalCode",
                ],
              },
            },
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/independent": {
      get: {
        tags: ["Others"],
        summary: "JSON com profundidade de valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/brasil": {
      get: {
        tags: ["Others"],
        summary: "JSON com profundidade de valida√ß√µes" + count(),
        description:
          "JSON para treino de valida√ß√£o. \n\nVoc√™ pode fazer as chamadas nos seguintes endpoints: \n1.",
        parameters: [
          {
            name: "body",
            in: "body",
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/big-json": {
      get: {
        tags: ["Others"],
        summary: "JSON com profundidade de valida√ß√µes" + count(),
        description: "BIG JSON",
        parameters: [
          {
            name: "body",
            in: "body",
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/crud": {
      get: {
        tags: ["CRUD"],
        summary: "JSON CRUD valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        parameters: [
          {
            name: "body",
            in: "body",
            schema: {},
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },

      post: {
        tags: ["CRUD"],
        summary: "JSON CRUD valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                $schema: "http://json-schema.org/draft-07/schema#",
                title: "Generated schema for Root",
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                  },
                  email: {
                    type: "string",
                  },
                  idade: {
                    type: "number",
                  },
                  telefone: {
                    type: "string",
                  },
                  endereco: {
                    type: "string",
                  },
                  profissao: {
                    type: "string",
                  },
                  empresa: {
                    type: "string",
                  },
                },
                required: [
                  "nome",
                  "email",
                  "idade",
                  "telefone",
                  "endereco",
                  "profissao",
                  "empresa",
                ],
              },
            },
          },
          responses: {
            201: {
              description:
                "Valida√ß√£o bem-sucedida, todos os dados est√£o corretos.",
              content: {
                "text/plain": {
                  schema: {
                    $schema: "http://json-schema.org/draft-07/schema#",
                    title: "Generated schema for Root",
                    type: "object",
                    properties: {
                      nome: {
                        type: "string",
                      },
                      email: {
                        type: "string",
                      },
                      idade: {
                        type: "number",
                      },
                      telefone: {
                        type: "string",
                      },
                      endereco: {
                        type: "string",
                      },
                      profissao: {
                        type: "string",
                      },
                      empresa: {
                        type: "string",
                      },
                    },
                    required: [
                      "nome",
                      "email",
                      "idade",
                      "telefone",
                      "endereco",
                      "profissao",
                      "empresa",
                    ],
                  },
                },
              },
            },
            400: {
              description: "Erro de valida√ß√£o",
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      message: {
                        type: "string",
                        description:
                          "Mensagem detalhada sobre o erro de valida√ß√£o.",
                      },
                    },
                    example: {
                      message:
                        "Erro de valida√ß√£o: produtoId must be one of [1, 2, 3]",
                    },
                  },
                },
              },
            },
          },
        },
        responses: {
          201: {
            description: "success",
          },
        },
      },
    },
    "/crud/{id}": {
      get: {
        tags: ["CRUD"],
        summary: "JSON CRUD valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        operationId: "getUserById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "The ID of the user to retrieve",
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["CRUD"],
        summary: "JSON CRUD valida√ß√µes " + count(),
        description: "JSON para treino de valida√ß√£o",
        operationId: "updateUserById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "The ID of the user to update",
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                    description: "Nome do usu√°rio",
                  },
                  email: {
                    type: "string",
                    description: "Email do usu√°rio",
                  },
                  idade: {
                    type: "integer",
                    description: "Idade do usu√°rio",
                  },
                  telefone: {
                    type: "string",
                    description: "Telefone do usu√°rio",
                  },
                  endereco: {
                    type: "string",
                    description: "Endere√ßo do usu√°rio",
                  },
                  profissao: {
                    type: "string",
                    description: "Profiss√£o do usu√°rio",
                  },
                  empresa: {
                    type: "string",
                    description: "Empresa do usu√°rio",
                  },
                },
                required: ["nome"],
              },
            },
          },
        },
        responses: {
          200: {
            description: "Usu√°rio atualizado com sucesso",
          },
          400: {
            description: "Erro na requisi√ß√£o",
          },
          404: {
            description: "Usu√°rio n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["CRUD"],
        summary: "JSON CRUD valida√ß√µes" + count(),
        description: "JSON para treino de valida√ß√£o",
        operationId: "deleteUserById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "The ID of the user to retrieve",
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        responses: {
          200: {
            description: "success",
          },
        },
      },
    },
    "/produtos": {
      post: {
        tags: ["Shop"],
        summary: "Compra um produto " + count(),
        description:
          "Realiza a compra de um produto verificando o saldo na carteira",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                    description: "Nome do cliente",
                    example: "Nome do Cliente",
                  },
                  cpf: {
                    type: "string",
                    description: "CPF do cliente",
                    example: "12345678900",
                  },
                  id_produto: {
                    type: "integer",
                    description: "ID do produto",
                    example: 1,
                  },
                  valor_na_carteira: {
                    type: "number",
                    description: "Valor dispon√≠vel na carteira do cliente",
                    example: 5000,
                  },
                  send_email: {
                    type: "string",
                    description: "Se o cliente deseja enviar email",
                    example: "email@email.com",
                  },
                },
                required: ["nome", "cpf", "id_produto", "valor_na_carteira"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Compra realizada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    produto: {
                      type: "object",
                      description: "Dados do produto comprado",
                    },
                    message: {
                      type: "string",
                      description: "Mensagem de confirma√ß√£o da compra",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro na requisi√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    errors: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          msg: {
                            type: "string",
                          },
                          param: {
                            type: "string",
                          },
                          location: {
                            type: "string",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Produto n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
          500: {
            description: "Erro no servidor",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      get: {
        tags: ["Shop"],
        summary: "Busca todos os produtos " + count(),
        description: "Retorna uma lista de todos os produtos",
        responses: {
          200: {
            description: "Lista de produtos",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                        description: "ID do produto",
                      },
                      nome: {
                        type: "string",
                        description: "Nome do produto",
                      },
                      marca: {
                        type: "string",
                        description: "Marca do produto",
                      },
                      preco: {
                        type: "number",
                        description: "Pre√ßo do produto",
                      },
                    },
                  },
                  example: [
                    {
                      id: 1,
                      nome: "TV Smart 4K",
                      marca: "Samsung",
                      preco: 4500,
                    },
                    {
                      id: 2,
                      nome: "OLED 55' 4K",
                      marca: "LG",
                      preco: 6200,
                    },
                  ],
                },
              },
            },
          },
          500: {
            description: "Erro no servidor",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/produtos/{id_produto}": {
      get: {
        tags: ["Shop"],
        summary: "Busca um produto por ID " + count(),
        description: "Retorna os detalhes de um produto pelo seu ID",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do produto",
            schema: {
              type: "integer",
              format: "int64",
              example: 1,
            },
          },
        ],
        responses: {
          200: {
            description: "Detalhes do produto",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "integer",
                      description: "ID do produto",
                    },
                    nome: {
                      type: "string",
                      description: "Nome do produto",
                    },
                    marca: {
                      type: "string",
                      description: "Marca do produto",
                    },
                    preco: {
                      type: "number",
                      description: "Pre√ßo do produto",
                    },
                  },
                  example: {
                    id: 1,
                    nome: "TV Smart 4K",
                    marca: "Samsung",
                    preco: 4500,
                  },
                },
              },
            },
          },
          404: {
            description: "Produto n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
          500: {
            description: "Erro no servidor",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/clientes": {
      get: {
        tags: ["Bank"],
        summary: "Lista de Usu√°rios" + count(),
        description: "Retorna uma lista de clientes com cpf inv√°lido.",
        responses: {
          200: {
            description: "Lista de clientes retornada com sucesso.",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      nome: {
                        type: "string",
                      },
                      cpf: {
                        type: "string",
                      },
                      contato: {
                        type: "object",
                        properties: {
                          email: {
                            type: "string",
                          },
                          telefone: {
                            type: "string",
                          },
                          endereco: {
                            type: "string",
                          },
                        },
                      },
                      bank: {
                        type: "object",
                        properties: {
                          credito: {
                            type: "number",
                          },
                          debito: {
                            type: "number",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Bank"],
        summary: "Criar novo cliente" + count(),
        description:
          "Endpoint para criar um novo cliente. Criar um novo cliente para efetuar um pedido de /emprestimo",
        parameters: [],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                  },
                  cpf: {
                    type: "string",
                  },
                  contato: {
                    type: "object",
                    properties: {
                      email: {
                        type: "string",
                        format: "email",
                      },
                      telefone: {
                        type: "string",
                      },
                      endereco: {
                        type: "string",
                      },
                    },
                  },
                  bank: {
                    type: "object",
                    properties: {
                      credito: {
                        type: "number",
                      },
                      debito: {
                        type: "number",
                      },
                    },
                  },
                },
                required: ["nome", "cpf", "contato", "bank"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Novo cliente criado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                    },
                    nome: {
                      type: "string",
                    },
                    cpf: {
                      type: "string",
                    },
                    contato: {
                      type: "object",
                      properties: {
                        email: {
                          type: "string",
                          format: "email",
                        },
                        telefone: {
                          type: "string",
                        },
                        endereco: {
                          type: "string",
                        },
                      },
                    },
                    bank: {
                      type: "object",
                      properties: {
                        credito: {
                          type: "number",
                        },
                        debito: {
                          type: "number",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    errors: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          param: {
                            type: "string",
                          },
                          msg: {
                            type: "string",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/financiamento-produtos": {
      get: {
        tags: ["Bank"],
        summary: "Obter lista de produtos de luxo" + count(),
        description: "Endpoint para obter a lista de produtos de luxo.",
        responses: {
          200: {
            description: "Lista de produtos de luxo recuperada com sucesso.",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    produtosDeLuxo: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string" },
                          nome: { type: "string" },
                          marca: { type: "string" },
                          preco: { type: "number" },
                          tipo: { type: "string" },
                        },
                        required: ["id", "nome", "marca", "preco", "tipo"],
                      },
                    },
                  },
                },
              },
            },
          },
          500: {
            description: "Erro interno do servidor.",
          },
        },
      },
    },
    "/emprestimo": {
      post: {
        tags: ["Bank"],
        summary: "Solicitar Empr√©stimo" + count(),
        description:
          "Solicita um empr√©stimo para um cliente. informando id do cliente criado, ou da lista existente, e o valor do emprestimo (tipo inteiro)",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  id_cliente: {
                    type: "string",
                    description: "ID do cliente que solicita o empr√©stimo.",
                  },
                  emprestimo: {
                    type: "integer",
                    description: "Valor do empr√©stimo solicitado.",
                  },
                },
                required: ["id_cliente", "emprestimo"],
              },
            },
          },
        },
        responses: {
          201: {
            description:
              "Empr√©stimo aprovado. Retorna o objeto do cliente com o valor de cr√©dito atualizado.",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    nome: {
                      type: "string",
                    },
                    cpf: {
                      type: "string",
                    },
                    contato: {
                      type: "object",
                      properties: {
                        email: {
                          type: "string",
                        },
                        telefone: {
                          type: "string",
                        },
                        endereco: {
                          type: "string",
                        },
                      },
                    },
                    bank: {
                      type: "object",
                      properties: {
                        credito: {
                          type: "number",
                        },
                        debito: {
                          type: "number",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro ao processar a solicita√ß√£o.",
          },
        },
      },
    },
    "/contratar-financiamento": {
      post: {
        tags: ["Bank"],
        summary: "Contratar financiamento" + count(),
        description:
          "Endpoint para contratar financiamento de produtos de luxo. Podendo enviar email da aquisi√ß√£o.",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                $schema: "http://json-schema.org/draft-07/schema#",
                title: "ContratarFinanciamento",
                type: "object",
                properties: {
                  id_cliente: {
                    type: "string",
                    description: "ID do cliente.",
                  },
                  id_produto: {
                    type: "string",
                    description: "ID do produto a ser financiado.",
                  },
                  code_emprestimo: {
                    type: "string",
                    description: "c√≥digo gerado ao contratar.",
                  },
                  receber_email: {
                    type: "string",
                    description:
                      "Se o comprador opta por receber emails promocionais.",
                  },
                },
                required: ["id_cliente", "id_produto"],
              },
            },
          },
        },
        responses: {
          200: {
            description: "Sucesso",
            content: {
              "application/json": {
                schema: {
                  $schema: "http://json-schema.org/draft-07/schema#",
                  title: "MensagemSucesso",
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      description: "Mensagem de sucesso.",
                    },
                  },
                  required: ["message"],
                },
              },
            },
          },
          400: {
            description: "Erro",
            content: {
              "application/json": {
                schema: {
                  $schema: "http://json-schema.org/draft-07/schema#",
                  title: "MensagemErro",
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      description: "Mensagem de erro.",
                    },
                    diferenca: {
                      type: "integer",
                      description:
                        "Diferen√ßa entre o pre√ßo do produto e o cr√©dito do cliente.",
                    },
                  },
                  required: ["message"],
                },
              },
            },
          },
        },
      },
    },
    "/projects": {
      post: {
        tags: ["Projetos"],
        summary: "Cria um novo projeto" + count(),
        description:
          "Este endpoint cria um novo projeto com um nome, descri√ß√£o, data de t√©rmino e membros.",
        operationId: "createProject",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "Nome do projeto",
                  },
                  leader: {
                    type: "string",
                    description: "L√≠der do projeto",
                  },
                  description: {
                    type: "string",
                    description: "Descri√ß√£o do projeto",
                  },
                  endDate: {
                    type: "string",
                    format: "date",
                    description: "Data de t√©rmino do projeto",
                  },
                },
                required: ["name", "description", "endDate", "leader"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Projeto criado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    project: {
                      type: "object",
                      properties: {
                        id: {
                          type: "integer",
                        },
                        name: {
                          type: "string",
                        },
                        description: {
                          type: "string",
                        },
                        startDate: {
                          type: "string",
                          format: "date",
                        },
                        endDate: {
                          type: "string",
                          format: "date",
                        },
                        members: {
                          type: "array",
                          items: {
                            type: "string",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
        },
      },
      get: {
        tags: ["Projetos"],
        summary: "Obt√©m todos os projetos" + count(),
        description:
          "Este endpoint retorna uma lista de todos os projetos cadastrados.",
        operationId: "getProjects",
        responses: {
          200: {
            description: "Lista de projetos recuperada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                      },
                      name: {
                        type: "string",
                      },
                      description: {
                        type: "string",
                      },
                      startDate: {
                        type: "string",
                        format: "date",
                      },
                      endDate: {
                        type: "string",
                        format: "date",
                      },
                      members: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Nenhum projeto encontrado",
          },
        },
      },
    },
    "/projects/{id}": {
      get: {
        tags: ["Projetos"],
        summary: "Busca um projeto por ID" + count(),
        description:
          "Retorna detalhes de um projeto espec√≠fico baseado no ID fornecido.",
        operationId: "getProjectById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do projeto a ser buscado",
            schema: {
              type: "integer",
            },
          },
        ],
        responses: {
          200: {
            description: "Projeto encontrado e retornado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: { type: "integer" },
                    name: { type: "string" },
                    description: { type: "string" },
                    startDate: { type: "string", format: "date" },
                    endDate: { type: "string", format: "date" },
                    members: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          name: { type: "string" },
                          office: { type: "string" },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Projeto n√£o encontrado",
          },
        },
      },
    },
    "/projects/{id}": {
      put: {
        tags: ["Projetos"],
        summary: "Atualiza um projeto existente" + count(),
        description:
          "Atualiza os detalhes de um projeto espec√≠fico pelo ID. Permite atualiza√ß√£o parcial.",
        operationId: "updateProject",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do projeto a ser atualizado",
            schema: {
              type: "integer",
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "Nome do projeto",
                  },
                  description: {
                    type: "string",
                    description: "Descri√ß√£o detalhada do projeto",
                  },
                  startDate: {
                    type: "string",
                    format: "date",
                    description: "Data de in√≠cio do projeto",
                  },
                  endDate: {
                    type: "string",
                    format: "date",
                    description: "Data de t√©rmino do projeto",
                  },
                  members: {
                    type: "array",
                    items: {
                      type: "object",
                      properties: {
                        name: {
                          type: "string",
                          description: "Nome do membro",
                        },
                        office: {
                          type: "string",
                          description: "Cargo do membro no projeto",
                        },
                      },
                    },
                    description: "Lista de membros do projeto",
                  },
                },
                required: [],
              },
            },
          },
        },
        responses: {
          200: {
            description: "Projeto atualizado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    project: {
                      type: "object",
                      properties: {
                        id: {
                          type: "integer",
                        },
                        name: {
                          type: "string",
                        },
                        description: {
                          type: "string",
                        },
                        startDate: {
                          type: "string",
                          format: "date",
                        },
                        endDate: {
                          type: "string",
                          format: "date",
                        },
                        members: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              name: {
                                type: "string",
                              },
                              office: {
                                type: "string",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Projeto n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["Projetos"],
        summary: "Deleta um projeto" + count(),
        description: "Deleta um projeto espec√≠fico pelo ID.",
        operationId: "deleteProject",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do projeto a ser deletado",
            schema: {
              type: "integer",
            },
          },
        ],
        responses: {
          200: {
            description: "Projeto deletado com sucesso",
          },
          404: {
            description: "Projeto n√£o encontrado",
          },
        },
      },
    },
    "/projects/{id}/members": {
      get: {
        tags: ["Projetos"],
        summary: "Busca membros de um projeto por ID do projeto" + count(),
        description:
          "Retorna uma lista de membros de um projeto espec√≠fico baseado no ID do projeto.",
        operationId: "getMembersByProjectId",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do projeto cujos membros ser√£o buscados",
            schema: {
              type: "integer",
            },
          },
        ],
        responses: {
          200: {
            description:
              "Membros do projeto encontrados e retornados com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      name: { type: "string" },
                      office: { type: "string" },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Projeto n√£o encontrado",
          },
        },
      },
    },
    "/projects/{id}/member": {
      post: {
        tags: ["Projetos"],
        summary:
          "Adiciona um novo membro ao projeto, e usando o campo send_email, voc√™ enviar√° email de teste." +
          count(),
        description:
          "Este endpoint adiciona um novo membro a um projeto existente, identificado pelo ID do projeto. O membro adicionado inclui informa√ß√µes como nome e cargo, e opcionalmente um endere√ßo de email para notifica√ß√£o.",
        operationId: "addMember",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  member_name: {
                    type: "string",
                    description: "Nome do novo membro",
                  },
                  office: {
                    type: "string",
                    description: "Cargo do novo membro",
                  },
                  send_email: {
                    type: "string",
                    description:
                      "Endere√ßo de email opcional para enviar notifica√ß√£o de ades√£o",
                    nullable: true,
                  },
                },
                required: ["member_name", "office"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Membro adicionado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    project: {
                      type: "object",
                      properties: {
                        id: {
                          type: "integer",
                        },
                        name: {
                          type: "string",
                        },
                        description: {
                          type: "string",
                        },
                        startDate: {
                          type: "string",
                          format: "date",
                        },
                        endDate: {
                          type: "string",
                          format: "date",
                        },
                        members: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              name: {
                                type: "string",
                              },
                              office: {
                                type: "string",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Projeto n√£o encontrado",
          },
        },
      },
    },
    "/projects/{id}/member/{id_member}": {
      delete: {
        tags: ["Projetos"],
        summary: "Deleta um membro de um projeto" + count(),
        description:
          "Deleta um membro espec√≠fico de um projeto pelo nome do membro e ID do projeto.",
        operationId: "deleteMember",
        parameters: [
          {
            name: "projectId",
            in: "path",
            required: true,
            description: "ID do projeto do qual o membro ser√° deletado",
            schema: {
              type: "integer",
            },
          },
          {
            name: "id_member",
            in: "path",
            required: true,
            description: "id do membro a ser deletado",
            schema: {
              type: "integer",
            },
          },
        ],
        responses: {
          200: {
            description: "Membro deletado com sucesso",
          },
          404: {
            description: "Projeto ou membro n√£o encontrado",
          },
        },
      },
    },
    "/clients": {
      post: {
        tags: ["Payments"],
        summary: "Cria um novo cliente" + count(),
        description:
          "Adiciona um novo cliente √† lista com informa√ß√µes como nome, CPF, bandeira do cart√£o e cr√©dito dispon√≠vel.",
        operationId: "addNewClient",
        requestBody: {
          description: "Dados do cliente necess√°rios para registro",
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "Nome completo do cliente",
                  },
                  cpf: {
                    type: "string",
                    pattern: "^\\d{11}$",
                    description: "CPF do cliente sem pontos ou tra√ßos",
                  },
                  card: {
                    type: "object",
                    required: ["flag", "credit"],
                    properties: {
                      flag: {
                        type: "string",
                        enum: ["MASTER", "VISA"],
                        description: "Bandeira do cart√£o de cr√©dito do cliente",
                      },
                      credit: {
                        type: "number",
                        format: "float",
                        minimum: 0,
                        description:
                          "Valor de cr√©dito dispon√≠vel para o cliente",
                      },
                    },
                  },
                },
                required: ["name", "cpf", "card"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Cliente criado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    client: {
                      $ref: "#/components/schemas/Client",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o ou dados incorretos fornecidos",
          },
        },
      },
      get: {
        tags: ["Payments"],
        summary: "Obt√©m a lista de todos os clientes" + count(),
        description:
          "Retorna uma lista contendo todos os clientes registrados, incluindo informa√ß√µes detalhadas como nome, CPF, bandeira do cart√£o e cr√©dito dispon√≠vel.",
        operationId: "getClients",
        responses: {
          200: {
            description: "Lista de clientes recuperada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    $ref: "#/components/schemas/Client",
                  },
                },
              },
            },
          },
          404: {
            description: "Nenhum cliente encontrado",
          },
        },
      },
    },
    "/clients/{id}": {
      get: {
        tags: ["Payments"],
        summary:
          "Obt√©m informa√ß√µes detalhadas de um cliente espec√≠fico por ID" +
          count(),
        description:
          "Retorna um cliente espec√≠fico baseado no ID fornecido, incluindo nome, CPF, bandeira do cart√£o e cr√©dito dispon√≠vel.",
        operationId: "getClientById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID √∫nico do cliente",
            schema: {
              type: "integer",
            },
          },
        ],
        responses: {
          200: {
            description: "Cliente encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Client",
                },
              },
            },
          },
          404: {
            description: "Cliente n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["Payments"],
        summary: "Deleta um cliente espec√≠fico" + count(),
        description: "Remove um cliente do registro com base no ID fornecido.",
        operationId: "deleteClientById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID √∫nico do cliente a ser deletado",
            schema: {
              type: "integer",
            },
          },
        ],
        responses: {
          200: {
            description: "Cliente deletado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Cliente n√£o encontrado",
          },
        },
      },
      put: {
        tags: ["Payments"],
        summary: "Atualiza um cliente existente" + count(),
        description:
          "Atualiza as informa√ß√µes de um cliente espec√≠fico com base no ID fornecido.",
        operationId: "updateClientById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID √∫nico do cliente a ser atualizado",
            schema: {
              type: "integer",
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "Nome completo do cliente",
                  },
                  cpf: {
                    type: "string",
                    pattern: "^\\d{11}$",
                    description: "CPF do cliente sem pontos ou tra√ßos",
                  },
                  card: {
                    type: "object",
                    properties: {
                      flag: {
                        type: "string",
                        enum: ["MASTER", "VISA"],
                        description: "Bandeira do cart√£o de cr√©dito do cliente",
                      },
                      credit: {
                        type: "number",
                        format: "float",
                        description:
                          "Valor de cr√©dito dispon√≠vel para o cliente",
                      },
                    },
                  },
                },
                required: [],
              },
            },
          },
        },
        responses: {
          200: {
            description: "Cliente atualizado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Client",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o ou dados incorretos fornecidos",
          },
          404: {
            description: "Cliente n√£o encontrado",
          },
        },
      },
    },
    "/products-gamers": {
      get: {
        tags: ["Payments"],
        summary: "Lista todos os produtos gamers" + count(),
        description:
          "Retorna uma lista completa de produtos gamers dispon√≠veis.",
        operationId: "getProductsGamers",
        responses: {
          200: {
            description: "Uma lista de produtos gamers",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    $ref: "#/components/schemas/Products",
                  },
                },
              },
            },
          },
        },
      },
    },
    "/products-purchase-gamers": {
      post: {
        tags: ["Payments"],
        summary: "Realiza uma compra de produto gamer" + count(),
        description:
          "Permite ao cliente comprar um produto, verificando se o cliente e o produto existem, e se o cr√©dito √© suficiente. Os valores dos produtos mudam a cada requis√ß√£o, fazendo com que o tester precise calcular o valor necess√°rio. Podendo enviar email da aquisi√ß√£o.",
        operationId: "buyProduct",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  id_client: {
                    type: "integer",
                    description: "ID do cliente",
                  },
                  id_product: {
                    type: "integer",
                    description: "ID do produto",
                  },
                  send_email: {
                    type: "string",
                    description: "caso queira enviar email para o comprador",
                  },
                },
                required: ["id_client", "id_product"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Compra realizada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    product: {
                      type: "string",
                    },
                    remainingCredit: {
                      type: "integer",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro na compra, como cr√©dito insuficiente",
          },
          404: {
            description: "Cliente ou produto n√£o encontrado",
          },
        },
      },
    },
    "/credit": {
      post: {
        tags: ["Payments"],
        summary: "Solicita√ß√£o de cr√©dito adicional" + count(),
        description:
          "Permite ao cliente solicitar cr√©dito adicional para a compra de um produto, tente via automa√ß√£o garantir que o cr√©dito seja apenas suficiente e n√£o  a mais.",
        operationId: "requestAdditionalCredit",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  id_client: {
                    type: "integer",
                    description: "ID do cliente",
                  },
                  id_product: {
                    type: "integer",
                    description: "ID do produto",
                  },
                  value_credit: {
                    type: "integer",
                    description: "Valor do cr√©dito adicional solicitado",
                  },
                },
                required: ["id_client", "id_product", "value_credit"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Cr√©dito adicionado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    newCredit: {
                      type: "integer",
                      description: "Novo total de cr√©dito do cliente",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Solicita√ß√£o de cr√©dito inv√°lida ou excessiva",
          },
          404: {
            description: "Cliente ou produto n√£o encontrado",
          },
        },
      },
    },
    "/company": {
      post: {
        tags: ["Company"],
        summary: "Cria uma nova empresa" + count(),
        description:
          "Este endpoint cria um novo registro de empresa com nome, CNPJ, estado, cidade, endere√ßo e setor.",
        operationId: "createCompany",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "Nome da empresa",
                  },
                  cnpj: {
                    type: "string",
                    description: "CNPJ v√°lido da empresa",
                  },
                  state: {
                    type: "string",
                    description: "Estado onde a empresa est√° localizada",
                  },
                  city: {
                    type: "string",
                    description: "Cidade onde a empresa est√° localizada",
                  },
                  address: {
                    type: "string",
                    description: "Endere√ßo completo da empresa",
                  },
                  sector: {
                    type: "string",
                    description: "Setor de atua√ß√£o da empresa",
                  },
                },
                required: [
                  "name",
                  "cnpj",
                  "state",
                  "city",
                  "address",
                  "sector",
                ],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Empresa criada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                    },
                    company: {
                      type: "object",
                      properties: {
                        id: {
                          type: "integer",
                        },
                        name: {
                          type: "string",
                        },
                        cnpj: {
                          type: "string",
                        },
                        state: {
                          type: "string",
                        },
                        city: {
                          type: "string",
                        },
                        address: {
                          type: "string",
                        },
                        sector: {
                          type: "string",
                        },
                        products: {
                          type: "array",
                          items: {
                            type: "object",
                          },
                        },
                        employees: {
                          type: "array",
                          items: {
                            type: "object",
                          },
                        },
                        services: {
                          type: "array",
                          items: {
                            type: "object",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
        },
      },
      get: {
        tags: ["Company"],
        summary: "Obt√©m todas as empresas" + count(),
        description:
          "Este endpoint retorna uma lista de todas as empresas cadastradas.",
        operationId: "getcompany",
        responses: {
          200: {
            description: "Lista de empresas recuperada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                      },
                      name: {
                        type: "string",
                      },
                      cnpj: {
                        type: "string",
                      },
                      state: {
                        type: "string",
                      },
                      city: {
                        type: "string",
                      },
                      address: {
                        type: "string",
                      },
                      sector: {
                        type: "string",
                      },
                      products: {
                        type: "array",
                        items: {
                          type: "object",
                        },
                      },
                      employees: {
                        type: "array",
                        items: {
                          type: "object",
                        },
                      },
                      services: {
                        type: "array",
                        items: {
                          type: "object",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Nenhuma empresa encontrada",
          },
        },
      },
      put: {
        tags: ["Company"],
        summary: "Atualiza uma empresa espec√≠fica" + count(),
        description:
          "Este endpoint atualiza os detalhes de uma empresa espec√≠fica baseada no ID fornecido.",
        operationId: "updateCompany",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID da empresa a ser atualizada",
            type: "integer",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                $ref: "#/definitions/Company",
              },
            },
          },
        },
        responses: {
          200: {
            description: "Empresa atualizada com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/definitions/Company",
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa n√£o encontrada",
          },
        },
      },
    },
    "/company/{companyId}": {
      get: {
        tags: ["Company"],
        summary: "Obt√©m uma empresa pelo ID" + count(),
        description:
          "Retorna os detalhes de uma empresa espec√≠fica baseado no ID fornecido.",
        operationId: "getCompanyById",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID num√©rico da empresa a ser recuperada",
          },
        ],
        responses: {
          200: {
            description: "Detalhes da empresa",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Company",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o nos par√¢metros de entrada",
          },
          404: {
            description: "Empresa n√£o encontrada",
          },
        },
      },
      delete: {
        tags: ["Company"],
        summary: "Deleta uma empresa espec√≠fica" + count(),
        description:
          "Este endpoint remove uma empresa espec√≠fica do sistema baseado no ID fornecido.",
        operationId: "deleteCompany",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID da empresa a ser deletada",
            type: "integer",
          },
        ],
        responses: {
          200: {
            description: "Empresa deletada com sucesso",
          },
          404: {
            description: "Empresa n√£o encontrada",
          },
        },
      },
    },
    "/company/{companyId}/products": {
      get: {
        tags: ["Company"],
        summary: "Lista todos os produtos de uma empresa espec√≠fica" + count(),
        description:
          "Recupera todos os produtos associados a um ID de empresa especificado.",
        operationId: "getCompanyProducts",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description:
              "O ID num√©rico da empresa cujos produtos ser√£o recuperados",
          },
        ],
        responses: {
          200: {
            description: "Lista de produtos recuperada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      productId: {
                        type: "integer",
                        description: "O identificador √∫nico do produto",
                      },
                      productName: {
                        type: "string",
                        description: "O nome do produto",
                      },
                      productDescription: {
                        type: "string",
                        description: "Uma breve descri√ß√£o do produto",
                      },
                      price: {
                        type: "integer",
                        description: "O pre√ßo do produto em centavos",
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Entrada inv√°lida, objeto inv√°lido",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    errors: {
                      type: "array",
                      items: {
                        type: "string",
                        description: "Lista de erros de valida√ß√£o",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Empresa n√£o encontrada",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      description:
                        "Mensagem de erro indicando que a empresa n√£o foi encontrada.",
                    },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Company"],
        summary: "Adiciona um produto a uma empresa espec√≠fica" + count(),
        description:
          "Este endpoint adiciona um novo produto √† lista de produtos de uma empresa espec√≠fica.",
        operationId: "addProductToCompany",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            description: "ID da empresa √† qual o produto ser√° adicionado",
            type: "integer",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                required: ["productName", "productDescription", "price"],
                properties: {
                  productName: {
                    type: "string",
                    description: "Nome do produto",
                  },
                  productDescription: {
                    type: "string",
                    description: "Descri√ß√£o do produto",
                  },
                  price: {
                    type: "integer",
                    description: "Pre√ßo do produto em centavos",
                  },
                },
              },
            },
          },
        },
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  required: ["productName", "productDescription", "price"],
                  properties: {
                    productName: {
                      type: "string",
                      description: "Nome do produto",
                    },
                    productDescription: {
                      type: "string",
                      description: "Descri√ß√£o do produto",
                    },
                    price: {
                      type: "integer",
                      description: "Pre√ßo do produto em centavos",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa n√£o encontrada",
          },
        },
      },
    },
    "/company/{companyId}/products/{productId}": {
      get: {
        tags: ["Company"],
        summary: "Obt√©m um produto espec√≠fico de uma empresa" + count(),
        description:
          "Retorna os detalhes de um produto espec√≠fico de uma empresa baseado nos IDs fornecidos da empresa e do produto.",
        operationId: "getProductById",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa na qual o produto est√° localizado",
          },
          {
            name: "productId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do produto que ser√° recuperado",
          },
        ],
        responses: {
          200: {
            description: "Detalhes do produto",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    productId: {
                      type: "integer",
                      description: "ID do produto",
                    },
                    productName: {
                      type: "string",
                      description: "Nome do produto",
                    },
                    productDescription: {
                      type: "string",
                      description: "Descri√ß√£o do produto",
                    },
                    price: {
                      type: "integer",
                      description: "Pre√ßo do produto em centavos",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o nos par√¢metros de entrada",
          },
          404: {
            description: "Empresa ou produto n√£o encontrado",
          },
        },
      },
      put: {
        tags: ["Company"],
        summary: "Atualiza um produto espec√≠fico de uma empresa" + count(),
        description:
          "Este endpoint atualiza os detalhes de um produto espec√≠fico dentro de uma empresa.",
        operationId: "updateProductInCompany",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            description: "ID da empresa na qual o produto est√° localizado",
            type: "integer",
          },
          {
            name: "productId",
            in: "path",
            required: true,
            description: "ID do produto que ser√° atualizado",
            type: "integer",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  productName: {
                    type: "string",
                    description: "Nome do produto",
                    example: "Novo Software de Gest√£o",
                  },
                  productDescription: {
                    type: "string",
                    description: "Descri√ß√£o do produto",
                    example:
                      "Software atualizado para gest√£o empresarial, incluindo m√≥dulos de finan√ßas, vendas e opera√ß√µes.",
                  },
                  price: {
                    type: "integer",
                    description: "Pre√ßo do produto em centavos",
                    example: 5500,
                  },
                },
              },
            },
          },
        },
        responses: {
          200: {
            description: "Produto atualizado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Product",
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa ou produto n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["Company"],
        summary: "Remove um produto de uma empresa" + count(),
        description:
          "Este endpoint remove um produto espec√≠fico de uma empresa.",
        operationId: "deleteProductFromCompany",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            description: "ID da empresa da qual o produto ser√° removido",
            type: "integer",
          },
          {
            name: "productId",
            in: "path",
            required: true,
            description: "ID do produto a ser removido",
            type: "integer",
          },
        ],
        responses: {
          200: {
            description: "Produto removido com sucesso",
          },
          404: {
            description: "Empresa ou produto n√£o encontrado",
          },
        },
      },
    },
    // employees
    "/company/{companyId}/employees": {
      get: {
        tags: ["Company"],
        summary:
          "Lista todos os funcion√°rios de uma empresa espec√≠fica" + count(),
        description:
          "Recupera todos os funcion√°rios associados a um ID de empresa especificado.",
        operationId: "getEmployeesByCompany",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description:
              "O ID num√©rico da empresa cujos funcion√°rios ser√£o recuperados",
          },
        ],
        responses: {
          200: {
            description: "Lista de funcion√°rios recuperada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      employeeId: {
                        type: "integer",
                        description: "O identificador √∫nico do funcion√°rio",
                      },
                      name: {
                        type: "string",
                        description: "O nome do funcion√°rio",
                      },
                      position: {
                        type: "string",
                        description: "O cargo do funcion√°rio",
                      },
                      email: {
                        type: "string",
                        format: "email",
                        description: "O endere√ßo de email do funcion√°rio",
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Entrada inv√°lida, objeto inv√°lido",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    errors: {
                      type: "array",
                      items: {
                        type: "string",
                        description: "Lista de erros de valida√ß√£o",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Empresa n√£o encontrada",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      description:
                        "Mensagem de erro indicando que a empresa n√£o foi encontrada.",
                    },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Company"],
        summary: "Adiciona um funcion√°rio √† empresa" + count(),
        description:
          "Cria um novo funcion√°rio dentro da empresa especificada pelo ID da empresa.",
        operationId: "addEmployee",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa onde o funcion√°rio ser√° adicionado",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                required: ["name", "position", "email"],
                properties: {
                  name: {
                    type: "string",
                    description: "Nome do funcion√°rio",
                  },
                  position: {
                    type: "string",
                    description: "Cargo do funcion√°rio",
                  },
                  email: {
                    type: "string",
                    format: "email",
                    description: "Email do funcion√°rio",
                  },
                },
              },
            },
          },
        },
        responses: {
          201: {
            description: "Funcion√°rio adicionado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Employee",
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa n√£o encontrada",
          },
        },
      },
    },
    "/company/{companyId}/employees/{employeeId}": {
      get: {
        tags: ["Company"],
        summary: "Obt√©m um funcion√°rio espec√≠fico" + count(),
        description:
          "Retorna os detalhes de um funcion√°rio espec√≠fico de uma empresa baseado nos IDs fornecidos.",
        operationId: "getEmployeeById",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa onde o funcion√°rio est√° localizado",
          },
          {
            name: "employeeId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do funcion√°rio que ser√° recuperado",
          },
        ],
        responses: {
          200: {
            description: "Detalhes do funcion√°rio recuperado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    employeeId: {
                      type: "integer",
                      description: "ID do funcion√°rio",
                    },
                    name: {
                      type: "string",
                      description: "Nome do funcion√°rio",
                    },
                    position: {
                      type: "string",
                      description: "Cargo do funcion√°rio",
                    },
                    email: {
                      type: "string",
                      format: "email",
                      description: "Email do funcion√°rio",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o nos par√¢metros de entrada",
          },
          404: {
            description: "Empresa ou funcion√°rio n√£o encontrado",
          },
        },
      },
      put: {
        tags: ["Company"],
        summary: "Atualiza um funcion√°rio espec√≠fico" + count(),
        description:
          "Atualiza os detalhes de um funcion√°rio existente na empresa especificada.",
        operationId: "updateEmployee",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa onde o funcion√°rio est√° localizado",
          },
          {
            name: "employeeId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do funcion√°rio a ser atualizado",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                    description: "Nome do funcion√°rio",
                  },
                  position: {
                    type: "string",
                    description: "Cargo do funcion√°rio",
                  },
                  email: {
                    type: "string",
                    format: "email",
                    description: "Email do funcion√°rio",
                  },
                },
              },
            },
          },
        },
        responses: {
          200: {
            description: "Funcion√°rio atualizado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Employee",
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa ou funcion√°rio n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["Company"],
        summary: "Remove um funcion√°rio espec√≠fico" + count(),
        description:
          "Remove um funcion√°rio da empresa especificada pelo ID da empresa e do funcion√°rio.",
        operationId: "deleteEmployee",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa da qual o funcion√°rio ser√° removido",
          },
          {
            name: "employeeId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do funcion√°rio a ser removido",
          },
        ],
        responses: {
          200: {
            description: "Funcion√°rio removido com sucesso",
          },
          404: {
            description: "Empresa ou funcion√°rio n√£o encontrado",
          },
        },
      },
    },
    // services
    "/company/{companyId}/services": {
      get: {
        tags: ["Company"],
        summary: "Lista todos os servi√ßos de uma empresa espec√≠fica" + count(),
        description:
          "Recupera todos os servi√ßos associados a um ID de empresa especificado.",
        operationId: "getServicesByCompany",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description:
              "O ID num√©rico da empresa cujos servi√ßos ser√£o recuperados",
          },
        ],
        responses: {
          200: {
            description: "Lista de servi√ßos recuperada com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      serviceId: {
                        type: "integer",
                        description: "O identificador √∫nico do servi√ßo",
                      },
                      serviceName: {
                        type: "string",
                        description: "O nome do servi√ßo",
                      },
                      serviceDescription: {
                        type: "string",
                        description: "Uma breve descri√ß√£o do servi√ßo",
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Entrada inv√°lida, objeto inv√°lido",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    errors: {
                      type: "array",
                      items: {
                        type: "string",
                      },
                      description: "Lista de erros de valida√ß√£o",
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Empresa n√£o encontrada",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      description:
                        "Mensagem de erro indicando que a empresa n√£o foi encontrada.",
                    },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Company"],
        summary: "Adiciona um servi√ßo √† empresa" + count(),
        description:
          "Cria um novo servi√ßo dentro da empresa especificada pelo ID da empresa.",
        operationId: "addService",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa onde o servi√ßo ser√° adicionado",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                required: ["serviceName", "serviceDescription"],
                properties: {
                  serviceName: {
                    type: "string",
                    description: "Nome do servi√ßo",
                  },
                  serviceDescription: {
                    type: "string",
                    description: "Descri√ß√£o do servi√ßo",
                  },
                },
              },
            },
          },
        },
        responses: {
          201: {
            description: "Servi√ßo adicionado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Service",
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa n√£o encontrada",
          },
        },
      },
    },
    "/company/{companyId}/services/{serviceId}": {
      get: {
        tags: ["Company"],
        summary: "Obt√©m um servi√ßo espec√≠fico" + count(),
        description:
          "Retorna os detalhes de um servi√ßo espec√≠fico de uma empresa baseado nos IDs fornecidos.",
        operationId: "getServiceById",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa onde o servi√ßo est√° localizado",
          },
          {
            name: "serviceId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do servi√ßo que ser√° recuperado",
          },
        ],
        responses: {
          200: {
            description: "Detalhes do servi√ßo recuperado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    serviceId: {
                      type: "integer",
                      description: "ID do servi√ßo",
                    },
                    serviceName: {
                      type: "string",
                      description: "Nome do servi√ßo",
                    },
                    serviceDescription: {
                      type: "string",
                      description: "Descri√ß√£o do servi√ßo",
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o nos par√¢metros de entrada",
          },
          404: {
            description: "Empresa ou servi√ßo n√£o encontrado",
          },
        },
      },
      put: {
        tags: ["Company"],
        summary: "Atualiza um servi√ßo espec√≠fico" + count(),
        description:
          "Atualiza os detalhes de um servi√ßo existente na empresa especificada.",
        operationId: "updateService",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa onde o servi√ßo est√° localizado",
          },
          {
            name: "serviceId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do servi√ßo a ser atualizado",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  serviceName: {
                    type: "string",
                    description: "Nome do servi√ßo",
                    example: "Atualiza√ß√£o de Software",
                  },
                  serviceDescription: {
                    type: "string",
                    description: "Descri√ß√£o do servi√ßo",
                    example:
                      "Servi√ßo atualizado para incluir novos recursos de seguran√ßa.",
                  },
                },
              },
            },
          },
        },
        responses: {
          200: {
            description: "Servi√ßo atualizado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Service",
                },
              },
            },
          },
          400: {
            description: "Dados inv√°lidos fornecidos",
          },
          404: {
            description: "Empresa ou servi√ßo n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["Company"],
        summary: "Remove um servi√ßo espec√≠fico" + count(),
        description:
          "Remove um servi√ßo da empresa especificada pelo ID da empresa e do servi√ßo.",
        operationId: "deleteService",
        parameters: [
          {
            name: "companyId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID da empresa da qual o servi√ßo ser√° removido",
          },
          {
            name: "serviceId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do servi√ßo a ser removido",
          },
        ],
        responses: {
          200: {
            description: "Servi√ßo removido com sucesso",
          },
          404: {
            description: "Empresa ou servi√ßo n√£o encontrado",
          },
        },
      },
    },
    //
    "/mercado": {
      get: {
        tags: ["Mercado"],
        summary: "Recupera todos os dados do mercado" + count(),
        description:
          "Retorna todos os dados da constante `mercado`, incluindo detalhes completos de todas as categorias e produtos.",
        operationId: "getMercado",
        produces: ["application/json"],
        responses: {
          200: {
            description: "Opera√ß√£o bem-sucedida",
            schema: {
              $ref: "#/definitions/Mercado",
            },
          },
          404: {
            description: "Dados n√£o encontrados",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary: "Adiciona um novo mercado" + count(),
        description:
          "Cria um novo registro de mercado com estruturas de categorias e subcategorias de produtos inicialmente vazias.",
        operationId: "addMercado",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "Objeto de mercado que precisa ser adicionado √† loja",
            required: true,
            schema: {
              $ref: "#/definitions/Mercado",
            },
          },
        ],
        responses: {
          201: {
            description: "Mercado criado",
          },
          400: {
            description: "Erro de valida√ß√£o ou dados faltando",
          },
        },
      },
    },
    "/mercado/{mercadoId}": {
      get: {
        tags: ["Mercado"],
        summary: "Busca um mercado por ID" + count(),
        description: "Retorna um mercado especificado pelo ID.",
        operationId: "getMercadoById",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado que precisa ser buscado",
            type: "integer",
          },
        ],
        responses: {
          200: {
            description: "Opera√ß√£o bem-sucedida",
            schema: {
              $ref: "#/definitions/Mercado",
            },
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
      put: {
        tags: ["Mercado"],
        summary: "Atualiza um mercado existente" + count(),
        description:
          "Atualiza um mercado espec√≠fico pelo ID com as informa√ß√µes fornecidas.",
        operationId: "updateMercado",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "mercadoId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado que ser√° atualizado",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description: "Objeto de mercado com as atualiza√ß√µes",
            schema: {
              $ref: "#/definitions/Mercado",
            },
          },
        ],
        responses: {
          200: {
            description: "Mercado atualizado com sucesso",
            schema: {
              $ref: "#/definitions/Mercado",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
      delete: {
        tags: ["Mercado"],
        summary: "Remove um mercado existente" + count(),
        description: "Remove um mercado espec√≠fico pelo ID.",
        operationId: "deleteMercado",
        produces: ["application/json"],
        parameters: [
          {
            name: "mercadoId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado que ser√° removido",
          },
        ],
        responses: {
          200: {
            description: "Mercado removido com sucesso",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{mercadoId}/produtos": {
      get: {
        tags: ["Mercado"],
        summary: "Obt√©m os produtos de um mercado espec√≠fico" + count(),
        description:
          "Retorna todos os produtos associados a um mercado espec√≠fico, identificado pelo ID.",
        operationId: "getProdutosByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "mercadoId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujos produtos est√£o sendo solicitados",
          },
        ],
        responses: {
          200: {
            description: "Produtos recuperados com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/hortifruit/frutas": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera as frutas de hortifruit de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de frutas da categoria hortifruit do mercado especificado pelo ID.",
        operationId: "getFrutasByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas frutas est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de frutas recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                frutas: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° frutas cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto √†s frutas de hortifruit de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de frutas de hortifruit do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToFruitCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de frutas",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/hortifruit/frutas/{frutaId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove uma fruta espec√≠fica de um mercado" + count(),
        description:
          "Remove uma fruta espec√≠fica pelo ID da fruta de dentro da categoria hortifruit de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteFruta",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual a fruta ser√° removida",
          },
          {
            name: "frutaId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID da fruta que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "Fruta removida com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "Fruta com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou fruta n√£o encontrada",
          },
        },
      },
    },
    // legumes
    "/mercado/{id}/produtos/hortifruit/legumes": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera as legumes de hortifruit de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de legumes da categoria hortifruit do mercado especificado pelo ID.",
        operationId: "getLegumesByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas legumes est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de legumes recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                legumes: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° legumes cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos Legumes de hortifruit de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de legumes de hortifruit do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToFruitCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de legumes",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/hortifruit/legumes/{legumesId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um Legume espec√≠fica de um mercado" + count(),
        description:
          "Remove um Legume espec√≠fica pelo ID da Legume de dentro da categoria hortifruit de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteLegume",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual a Legume ser√° removida",
          },
          {
            name: "legumesId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID da Legume que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "Legume removida com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "Legume com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou legume n√£o encontrada",
          },
        },
      },
    },
    // padaria doces
    "/mercado/{id}/produtos/padaria/doces": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os doces de padaria de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de doces da categoria padaria do mercado especificado pelo ID.",
        operationId: "getDocesByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujos doces est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de doces recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                doces: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° doces cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos doces de padaria de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de doces de padaria do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToDocesCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de doces",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/padaria/doces/{docesId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um Doces espec√≠fica de um mercado" + count(),
        description:
          "Remove um doce espec√≠fico pelo ID de Doces de dentro da categoria padaria de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteDoces",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual o Doces ser√° removida",
          },
          {
            name: "docesId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do Doces que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "Doces removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "Doces com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou Doces n√£o encontrado",
          },
        },
      },
    },
    // padaria salgados
    "/mercado/{id}/produtos/padaria/salgados": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os salgados de padaria de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de salgados da categoria padaria do mercado especificado pelo ID.",
        operationId: "getsalgadoByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujos salgados est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de salgados recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° salgado cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos salgados de padaria de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de padaria do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToSalgadoCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de salgado",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/padaria/salgados/{salgadoId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um salgado espec√≠fica de um mercado" + count(),
        description:
          "Remove um salgado espec√≠fica pelo ID do salgado de dentro da categoria padaria de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteSalgado",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual o salgado ser√° removida",
          },
          {
            name: "salgadoId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do salgado que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "salgado removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "salgado com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou salgado n√£o encontrada",
          },
        },
      },
    },
    // acougue bovinos
    "/mercado/{id}/produtos/acougue/bovinos": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os bovinos de acougue de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de bovinos da categoria acougue do mercado especificado pelo ID.",
        operationId: "getBovinoByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujos bovinos est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de bovinos recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° bovinos cadastrados",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos bovinos de acougue de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de acougue do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToBovinoCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de salgado",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/acougue/bovinos/{bovinosId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um bovino espec√≠fica de um mercado" + count(),
        description:
          "Remove um bovino espec√≠fica pelo ID do bovino de dentro da categoria acougue de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletebovino",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual o bovino ser√° removida",
          },
          {
            name: "bovinosId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do bovino que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "bovino removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "bovino com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou bovino n√£o encontrada",
          },
        },
      },
    },
    // acougue suinos
    "/mercado/{id}/produtos/acougue/suinos": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os suinos de acougue de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de suinos da categoria acougue do mercado especificado pelo ID.",
        operationId: "getSuinoByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujos suinos est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de suinos recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° su√≠nos cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos suinos de acougue de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de acougue do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToSuinoCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de salgado",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/acougue/suinos/{suinosId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um su√≠no espec√≠fica de um mercado" + count(),
        description:
          "Remove um su√≠no espec√≠fica pelo ID do su√≠no de dentro da categoria acougue de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletesu√≠no",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual o su√≠no ser√° removida",
          },
          {
            name: "suinosId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do su√≠no que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "su√≠no removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "su√≠no com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou su√≠no n√£o encontrada",
          },
        },
      },
    },
    // acougue aves
    "/mercado/{id}/produtos/acougue/aves": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera as aves de acougue de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de aves da categoria acougue do mercado especificado pelo ID.",
        operationId: "getAvesByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas aves est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de aves recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° aves cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos aves de acougue de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de acougue do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToAvesCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de salgado",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/acougue/aves/{avesId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove uma ave espec√≠fica de um mercado" + count(),
        description:
          "Remove  pelo ID do ave de dentro da categoria acougue de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteave",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual ave ser√° removida",
          },
          {
            name: "avesId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do ave que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "ave removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "ave com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou ave n√£o encontrada",
          },
        },
      },
    },
    // peixaria peixes
    "/mercado/{id}/produtos/peixaria/peixes": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera as peixes de peixaria de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de peixes da categoria peixaria do mercado especificado pelo ID.",
        operationId: "getpeixesByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas peixes est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de peixes recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° peixes cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos peixes de peixaria de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de peixaria do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTopeixesCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de peixes",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/peixaria/peixes/{peixesId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove uma ave espec√≠fica de um mercado" + count(),
        description:
          "Remove  pelo ID do peixe de dentro da categoria peixaria de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletepeixe",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual peixe ser√° removida",
          },
          {
            name: "peixesId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do peixe que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "peixe removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "peixe com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou peixe n√£o encontrada",
          },
        },
      },
    },
    // frutos do mar
    "/mercado/{id}/produtos/peixaria/frutosDoMar": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera as frutosDoMar de peixaria de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de frutosDoMar da categoria peixaria do mercado especificado pelo ID.",
        operationId: "getfrutosDoMarByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas frutosDoMar est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de frutosDoMar recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° frutosDoMar cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos frutosDoMar de peixaria de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de peixaria do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTofrutosDoMarCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de frutosDoMar",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/peixaria/frutosDoMar/{frutosDoMarId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove uma ave espec√≠fica de um mercado" + count(),
        description:
          "Remove  pelo ID do frutosDoMar de dentro da categoria peixaria de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletefrutosdomar",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual frutosDoMar ser√° removida",
          },
          {
            name: "frutosDoMarsId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do frutosDoMar que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "frutosDoMar removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "frutosDoMar com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou frutosDoMar n√£o encontrada",
          },
        },
      },
    },

    // frios queijo
    "/mercado/{id}/produtos/frios/queijos": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os queijos de frios de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de queijos da categoria frios do mercado especificado pelo ID.",
        operationId: "getQueijoByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas queijos est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de queijos recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° queijos cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos queijos de frios de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de salgado de frios do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToCheeseCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de frios",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/frios/queijos/{queijosId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um queijo espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do queijo de dentro da categoria frios de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletecheese",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual queijo ser√° removida",
          },
          {
            name: "queijosId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do queijo que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "queijo removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "queijo com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou queijo n√£o encontrada",
          },
        },
      },
    },
    // frios embutidos
    "/mercado/{id}/produtos/frios/embutidos": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os embutidos de frios de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de embutidos da categoria frios do mercado especificado pelo ID.",
        operationId: "getEmbutByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas embutidos est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de embutidos recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° embutidos cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos embutidos de frios de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de frios do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToFruitCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de frios",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/frios/embutidos/{embutidosId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um embutido espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do embutido de dentro da categoria frios de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteEmbut",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual embutido ser√° removida",
          },
          {
            name: "embutidosId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do embutido que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "embutido removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "embutido com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou embutido n√£o encontrada",
          },
        },
      },
    },
    // frios outros
    "/mercado/{id}/produtos/frios/outros": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os outros de frios de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de outros da categoria frios do mercado especificado pelo ID.",
        operationId: "getOutrosByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas outros est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de outros recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° outros cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos outros de frios de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de frios do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToOutrosCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de frios",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/frios/outros/{outrosId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um outros espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do outros de dentro da categoria frios de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteOutros",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual outros ser√° removida",
          },
          {
            name: "outrosId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do outros que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "outros removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "outros com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou outros n√£o encontrada",
          },
        },
      },
    },
    // mercearia graosCereais
    "/mercado/{id}/produtos/mercearia/graosCereais": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os graosCereais de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de graosCereais da categoria mercearia do mercado especificado pelo ID.",
        operationId: "getgraosCereaisByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas graosCereais est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de graosCereais recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° graosCereais cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos graosCereais de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de mercearia do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTograosCereaisCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de mercearia",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/mercearia/graosCereais/{graosCereaisId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um graosCereais espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do graosCereais de dentro da categoria mercearia de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletegraosCereais",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual graosCereais ser√° removida",
          },
          {
            name: "graosCereaisId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do graosCereais que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "graosCereais removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "graosCereais com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description:
              "Mercado n√£o encontrado ou graosCereais n√£o encontrada",
          },
        },
      },
    },
    // mercearia massas
    "/mercado/{id}/produtos/mercearia/massas": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os massas de mercearia de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de massas da categoria mercearia do mercado especificado pelo ID.",
        operationId: "getmassasByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas massas est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de massas recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° massas cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos massas de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de mercearia do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTomassasCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de mercearia",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/mercearia/massas/{massasId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um massas espec√≠fico de um mercado" + count(),
        description:
          "Remove pelo ID de massas de dentro da categoria mercearia de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletemassas",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual massas ser√° removida",
          },
          {
            name: "massasId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do massas que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "massas removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "massas com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou massas n√£o encontrada",
          },
        },
      },
    },
    // merc farinhas
    "/mercado/{id}/produtos/mercearia/farinhas": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os farinhas de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de farinhas da categoria mercearia do mercado especificado pelo ID.",
        operationId: "getfarinhasByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas farinhas est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de farinhas recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° farinhas cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos farinhas de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de mercearia do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTofarinhasCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de mercearia",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/mercearia/farinhas/{farinhasId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um farinhas espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do farinhas de dentro da categoria mercearia de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletefarinhas",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual farinhas ser√° removida",
          },
          {
            name: "farinhasId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do farinhas que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "farinhas removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "farinhas com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou farinhas n√£o encontrada",
          },
        },
      },
    },
    // merc conservados Enlatados
    "/mercado/{id}/produtos/mercearia/conservadosEnlatados": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os conservadosEnlatados de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de conservadosEnlatados da categoria mercearia do mercado especificado pelo ID.",
        operationId: "getconservadosEnlatadosByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas conservadosEnlatados est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de conservadosEnlatados recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° conservadosEnlatados cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos conservadosEnlatados de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de mercearia do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoToconservadosEnlatadosCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de mercearia",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/mercearia/conservadosEnlatados/{conservadosEnlatadosId}":
      {
        delete: {
          tags: ["Mercado"],
          summary:
            "Remove um conservadosEnlatados espec√≠fico de um mercado" + count(),
          description:
            "Remove pelo ID do conservadosEnlatados de dentro da categoria mercearia de um mercado espec√≠fico, tamb√©m identificado por ID.",
          operationId: "deleteconservadosEnlatados",
          produces: ["application/json"],
          parameters: [
            {
              name: "id",
              in: "path",
              required: true,
              type: "integer",
              description:
                "ID do mercado do qual conservadosEnlatados ser√° removida",
            },
            {
              name: "conservadosEnlatadosId",
              in: "path",
              required: true,
              type: "integer",
              description: "ID do conservadosEnlatados que ser√° removida",
            },
          ],
          responses: {
            200: {
              description: "conservadosEnlatados removido com sucesso",
              schema: {
                type: "object",
                properties: {
                  message: {
                    type: "string",
                    example:
                      "conservadosEnlatados com ID 123 foi removido com sucesso.",
                  },
                },
              },
            },
            400: {
              description: "Dados de entrada inv√°lidos",
            },
            404: {
              description:
                "Mercado n√£o encontrado ou conservadosEnlatados n√£o encontrada",
            },
          },
        },
      },
    // merc oleos
    "/mercado/{id}/produtos/mercearia/oleos": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os oleos de mercearia de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de oleos da categoria mercearia do mercado especificado pelo ID.",
        operationId: "getoleosByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas oleos est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de oleos recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° oleos cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos oleos de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de mercearia do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTooleosCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de mercearia",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/mercearia/oleos/{oleosId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um oleos espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do oleos de dentro da categoria mercearia de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deleteoleos",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual oleos ser√° removida",
          },
          {
            name: "oleosId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do oleos que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "oleos removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "oleos com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou oleos n√£o encontrada",
          },
        },
      },
    },
    // merc temperos condimentos
    "/mercado/{id}/produtos/mercearia/temperosCondimentos": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os temperosCondimentos de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de temperosCondimentos da categoria mercearia do mercado especificado pelo ID.",
        operationId: "gettemperosCondimentosByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas temperosCondimentos est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de temperosCondimentos recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° temperosCondimentos cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos temperosCondimentos de mercearia de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de mercearia do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTotemperosCondimentosCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de mercearia",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/mercearia/temperosCondimentos/{temperosCondimentosId}":
      {
        delete: {
          tags: ["Mercado"],
          summary:
            "Remove um temperosCondimentos espec√≠fico de um mercado" + count(),
          description:
            "Remove pelo ID do temperosCondimentos de dentro da categoria mercearia de um mercado espec√≠fico, tamb√©m identificado por ID.",
          operationId: "deletetemperosCondimentos",
          produces: ["application/json"],
          parameters: [
            {
              name: "id",
              in: "path",
              required: true,
              type: "integer",
              description:
                "ID do mercado do qual temperosCondimentos ser√° removida",
            },
            {
              name: "temperosCondimentosId",
              in: "path",
              required: true,
              type: "integer",
              description: "ID do temperosCondimentos que ser√° removida",
            },
          ],
          responses: {
            200: {
              description: "temperosCondimentos removido com sucesso",
              schema: {
                type: "object",
                properties: {
                  message: {
                    type: "string",
                    example:
                      "temperosCondimentos com ID 123 foi removido com sucesso.",
                  },
                },
              },
            },
            400: {
              description: "Dados de entrada inv√°lidos",
            },
            404: {
              description:
                "Mercado n√£o encontrado ou temperosCondimentos n√£o encontrada",
            },
          },
        },
      },
    // bebidas com alcool
    "/mercado/{id}/produtos/bebidas/comAlcool": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os comAlcool de bebidas de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de comAlcool da categoria bebidas do mercado especificado pelo ID.",
        operationId: "getcomAlcoolByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas comAlcool est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de comAlcool recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° comAlcool cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos comAlcool de bebidas de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de bebidas do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTocomAlcoolCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de bebidas",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/bebidas/comAlcool/{comAlcoolId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um comAlcool espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do comAlcool de dentro da categoria bebidas de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletecomAlcool",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual comAlcool ser√° removida",
          },
          {
            name: "comAlcoolId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do comAlcool que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "comAlcool removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "comAlcool com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou comAlcool n√£o encontrada",
          },
        },
      },
    },
    // bebidas sem alcool
    "/mercado/{id}/produtos/bebidas/semAlcool": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os semAlcool de bebidas de um mercado espec√≠fico" + count(),
        description:
          "Retorna a lista de semAlcool da categoria bebidas do mercado especificado pelo ID.",
        operationId: "getsemAlcoolByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description:
              "ID do mercado cujas semAlcool est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de semAlcool recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description:
              "Mercado n√£o encontrado ou n√£o h√° semAlcool cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos semAlcool de bebidas de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de bebidas do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTosemAlcoolCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de bebidas",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/bebidas/semAlcool/{semAlcoolId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um semAlcool espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do semAlcool de dentro da categoria bebidas de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletesemAlcool",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual semAlcool ser√° removida",
          },
          {
            name: "semAlcoolId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do semAlcool que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "semAlcool removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "semAlcool com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou semAlcool n√£o encontrada",
          },
        },
      },
    },
    // higine
    "/mercado/{id}/produtos/higieneLimpeza/higine": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os higine de higieneLimpeza de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de higine da categoria higieneLimpeza do mercado especificado pelo ID.",
        operationId: "gethigineByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas higine est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de higine recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° higine cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos higine de higieneLimpeza de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de higieneLimpeza do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTohigineCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de higieneLimpeza",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/higieneLimpeza/higine/{higineId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um higine espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do higine de dentro da categoria higieneLimpeza de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletehigine",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual higine ser√° removida",
          },
          {
            name: "higineId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do higine que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "higine removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "higine com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou higine n√£o encontrada",
          },
        },
      },
    },
    // limpeza
    "/mercado/{id}/produtos/higieneLimpeza/limpeza": {
      get: {
        tags: ["Mercado"],
        summary:
          "Recupera os limpeza de higieneLimpeza de um mercado espec√≠fico" +
          count(),
        description:
          "Retorna a lista de limpeza da categoria higieneLimpeza do mercado especificado pelo ID.",
        operationId: "getlimpezaByMercadoId",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado cujas limpeza est√£o sendo solicitadas",
          },
        ],
        responses: {
          200: {
            description: "Lista de limpeza recuperada com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
                salgado: {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Fruta",
                  },
                },
              },
            },
          },
          404: {
            description: "Mercado n√£o encontrado ou n√£o h√° limpeza cadastradas",
          },
        },
      },
      post: {
        tags: ["Mercado"],
        summary:
          "Adiciona um produto aos limpeza de higieneLimpeza de um mercado espec√≠fico" +
          count(),
        description:
          "Adiciona um novo produto √† subcategoria de higieneLimpeza do mercado identificado pelo ID fornecido na URL.",
        operationId: "addProdutoTolimpezaCategory",
        consumes: ["application/json"],
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "ID do mercado ao qual o produto ser√° adicionado",
            type: "integer",
          },
          {
            name: "body",
            in: "body",
            required: true,
            description:
              "Dados do produto para adicionar √† subcategoria de higieneLimpeza",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
        ],
        responses: {
          201: {
            description: "Produto adicionado com sucesso",
            schema: {
              $ref: "#/definitions/Produtos",
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado",
          },
        },
      },
    },
    "/mercado/{id}/produtos/higieneLimpeza/limpeza/{limpezaId}": {
      delete: {
        tags: ["Mercado"],
        summary: "Remove um limpeza espec√≠fico de um mercado" + count(),
        description:
          "Remove  pelo ID do limpeza de dentro da categoria higieneLimpeza de um mercado espec√≠fico, tamb√©m identificado por ID.",
        operationId: "deletelimpeza",
        produces: ["application/json"],
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do mercado do qual limpeza ser√° removida",
          },
          {
            name: "limpezaId",
            in: "path",
            required: true,
            type: "integer",
            description: "ID do limpeza que ser√° removida",
          },
        ],
        responses: {
          200: {
            description: "limpeza removido com sucesso",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "limpeza com ID 123 foi removido com sucesso.",
                },
              },
            },
          },
          400: {
            description: "Dados de entrada inv√°lidos",
          },
          404: {
            description: "Mercado n√£o encontrado ou limpeza n√£o encontrada",
          },
        },
      },
    },
    "/eventos": {
      get: {
        tags: ["Eventos"],
        summary: "Obter a lista de eventos",
        description: "Retorna uma lista de eventos j√° criados " + count(),
        operationId: "getEventos",
        responses: {
          200: {
            description: "Lista de eventos",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                        example: 1,
                      },
                      nome: {
                        type: "string",
                        example: "Confer√™ncia de Tecnologia",
                      },
                      data: {
                        type: "string",
                        format: "date",
                        example: "2024-06-01",
                      },
                      local: {
                        type: "string",
                        example: "Centro de Conven√ß√µes",
                      },
                      capacidade: {
                        type: "integer",
                        example: 500,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Eventos"],
        summary: "Criar um novo evento",
        description: "Cria um novo evento com valida√ß√µes " + count(),
        operationId: "createEvento",
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                    example: "Nome do Evento",
                  },
                  data: {
                    type: "string",
                    format: "date",
                    example: "2024-07-01",
                  },
                  local: {
                    type: "string",
                    example: "Local do Evento",
                  },
                  capacidade: {
                    type: "integer",
                    example: 10,
                  },
                },
                required: ["nome", "data", "local", "capacidade"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Evento criado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "integer",
                      example: 3,
                    },
                    nome: {
                      type: "string",
                      example: "Nome do Evento",
                    },
                    data: {
                      type: "string",
                      format: "date",
                      example: "2024-07-01",
                    },
                    local: {
                      type: "string",
                      example: "Local do Evento",
                    },
                    capacidade: {
                      type: "integer",
                      example: 10,
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example: "O nome do evento j√° existe",
                      },
                      param: {
                        type: "string",
                        example: "nome",
                      },
                      location: {
                        type: "string",
                        example: "body",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/eventos/{id}": {
      get: {
        tags: ["Eventos"],
        summary: "Obter um evento por ID " + count(),
        description: "Retorna um evento espec√≠fico pelo ID",
        operationId: "getEventoById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do evento",
          },
        ],
        responses: {
          200: {
            description: "Evento encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "integer",
                      example: 1,
                    },
                    nome: {
                      type: "string",
                      example: "Confer√™ncia de Tecnologia",
                    },
                    data: {
                      type: "string",
                      format: "date",
                      example: "2024-06-01",
                    },
                    local: {
                      type: "string",
                      example: "Centro de Conven√ß√µes",
                    },
                    capacidade: {
                      type: "integer",
                      example: 500,
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example: "O ID deve ser um n√∫mero inteiro positivo",
                      },
                      param: {
                        type: "string",
                        example: "id",
                      },
                      location: {
                        type: "string",
                        example: "params",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Evento n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      example: "Evento n√£o encontrado",
                    },
                  },
                },
              },
            },
          },
        },
      },
      put: {
        tags: ["Eventos"],
        summary: "Atualizar um evento por ID " + count(),
        description: "Atualiza um evento espec√≠fico pelo ID",
        operationId: "updateEventoById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do evento",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                    example: "Nome do Evento Atualizado",
                  },
                  data: {
                    type: "string",
                    format: "date",
                    example: "2024-07-01",
                  },
                  local: {
                    type: "string",
                    example: "Local do Evento Atualizado",
                  },
                  capacidade: {
                    type: "integer",
                    example: 200,
                  },
                },
                required: ["nome", "data", "local", "capacidade"],
              },
            },
          },
        },
        responses: {
          200: {
            description: "Evento atualizado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "integer",
                      example: 1,
                    },
                    nome: {
                      type: "string",
                      example: "Nome do Evento Atualizado",
                    },
                    data: {
                      type: "string",
                      format: "date",
                      example: "2024-07-01",
                    },
                    local: {
                      type: "string",
                      example: "Local do Evento Atualizado",
                    },
                    capacidade: {
                      type: "integer",
                      example: 200,
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example: "O ID deve ser um n√∫mero inteiro positivo",
                      },
                      param: {
                        type: "string",
                        example: "id",
                      },
                      location: {
                        type: "string",
                        example: "params",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Evento n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      example: "Evento n√£o encontrado",
                    },
                  },
                },
              },
            },
          },
        },
      },
      delete: {
        tags: ["Eventos"],
        summary: "Deletar um evento por ID " + count(),
        description: "Deleta um evento espec√≠fico pelo ID",
        operationId: "deleteEventoById",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do evento",
          },
        ],
        responses: {
          204: {
            description: "Evento deletado com sucesso",
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example: "O ID deve ser um n√∫mero inteiro positivo",
                      },
                      param: {
                        type: "string",
                        example: "id",
                      },
                      location: {
                        type: "string",
                        example: "params",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Evento n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      example: "Evento n√£o encontrado",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/eventos/{id}/participantes": {
      post: {
        tags: ["Eventos"],
        summary:
          "Adicionar um participante a um evento, envia e-mail." + count(),
        description:
          "Adiciona um novo participante a um evento espec√≠fico, caso o campo email esteja preenchido com e-mail v√°lido, enviar√° um e-mail de ades√£o.",
        operationId: "addParticipante",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do evento",
          },
        ],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  nome: {
                    type: "string",
                    example: "Jo√£o Silva",
                  },
                  email: {
                    type: "string",
                    example: "joao.silva@example.com",
                  },
                  idade: {
                    type: "integer",
                    example: 25,
                  },
                },
                required: ["nome", "idade"],
              },
            },
          },
        },
        responses: {
          201: {
            description: "Participante adicionado com sucesso",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "integer",
                      example: 1,
                    },
                    nome: {
                      type: "string",
                      example: "Jo√£o Silva",
                    },
                    email: {
                      type: "string",
                      example: "joao.silva@example.com",
                    },
                    idade: {
                      type: "integer",
                      example: 25,
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example: "O nome √© obrigat√≥rio",
                      },
                      param: {
                        type: "string",
                        example: "nome",
                      },
                      location: {
                        type: "string",
                        example: "body",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Evento n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      example: "Evento n√£o encontrado",
                    },
                  },
                },
              },
            },
          },
        },
      },
      get: {
        tags: ["Eventos"],
        summary: "Obter a lista de participantes de um evento " + count(),
        description: "Retorna a lista de participantes de um evento espec√≠fico",
        operationId: "getParticipantes",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do evento",
          },
        ],
        responses: {
          200: {
            description: "Lista de participantes",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                        example: 1,
                      },
                      nome: {
                        type: "string",
                        example: "Jo√£o Silva",
                      },
                      email: {
                        type: "string",
                        example: "joao.silva@example.com",
                      },
                      idade: {
                        type: "integer",
                        example: 25,
                      },
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example:
                          "O ID do evento deve ser um n√∫mero inteiro positivo",
                      },
                      param: {
                        type: "string",
                        example: "id",
                      },
                      location: {
                        type: "string",
                        example: "params",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Evento n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      example: "Evento n√£o encontrado",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/eventos/{id}/participantes/{participanteId}": {
      delete: {
        tags: ["Eventos"],
        summary: "Remover um participante de um evento " + count(),
        description:
          "Remove um participante espec√≠fico de um evento espec√≠fico",
        operationId: "removeParticipante",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do evento",
          },
          {
            name: "participanteId",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do participante",
          },
        ],
        responses: {
          204: {
            description: "Participante removido com sucesso",
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                        example:
                          "O ID do evento deve ser um n√∫mero inteiro positivo",
                      },
                      param: {
                        type: "string",
                        example: "id",
                      },
                      location: {
                        type: "string",
                        example: "params",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Evento ou participante n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      example: "Evento ou participante n√£o encontrado",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/herois": {
      get: {
        tags: ["Heroes"],
        summary: "Obter todos os her√≥is " + count(),
        responses: {
          200: {
            description: "Lista de her√≥is",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    $ref: "#/components/schemas/Heroi",
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Heroes"],
        summary: "Adicionar um novo her√≥i " + count(),
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                $ref: "#/components/schemas/Heroi",
              },
            },
          },
        },
        responses: {
          201: {
            description: "Her√≥i adicionado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/HeroiResponse",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
        },
      },
    },
    "/herois/{id}": {
      get: {
        tags: ["Heroes"],
        summary: "Obter um her√≥i por ID " + count(),
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do her√≥i",
          },
        ],
        responses: {
          200: {
            description: "Her√≥i encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Heroi",
                },
              },
            },
          },
          404: {
            description: "Her√≥i n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
        },
      },
      delete: {
        tags: ["Heroes"],
        summary: "Deletar um her√≥i por ID " + count(),
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do her√≥i",
          },
        ],
        responses: {
          200: {
            description: "Her√≥i deletado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Mensagem",
                },
              },
            },
          },
          404: {
            description: "Her√≥i n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
          500: {
            description: "Erro interno",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
        },
      },
    },
    "/herois-inuteis": {
      get: {
        tags: ["Heroes"],
        summary: "Obter todos os her√≥is " + count(),
        responses: {
          200: {
            description: "Lista de her√≥is",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    $ref: "#/components/schemas/Heroi",
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ["Heroes"],
        summary: "Adicionar um novo her√≥i " + count(),
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: {
                $ref: "#/components/schemas/Heroi",
              },
            },
          },
        },
        responses: {
          201: {
            description: "Her√≥i adicionado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/HeroiResponse",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
        },
      },
    },
    "/herois-inuteis/{id}": {
      get: {
        tags: ["Heroes"],
        summary: "Obter um her√≥i por ID " + count(),
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do her√≥i",
          },
        ],
        responses: {
          200: {
            description: "Her√≥i encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Heroi",
                },
              },
            },
          },
          404: {
            description: "Her√≥i n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
        },
      },
      delete: {
        tags: ["Heroes"],
        summary: "Deletar um her√≥i por ID " + count(),
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            schema: {
              type: "integer",
            },
            description: "ID do her√≥i",
          },
        ],
        responses: {
          200: {
            description: "Her√≥i deletado com sucesso",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Mensagem",
                },
              },
            },
          },
          404: {
            description: "Her√≥i n√£o encontrado",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
          400: {
            description: "Erro de valida√ß√£o",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
          500: {
            description: "Erro interno",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Erro",
                },
              },
            },
          },
        },
      },
    },
    "/animes": {
      get: {
        tags: ["Animes"],
        summary: "Get all animes  " + count(),
        description: "Retrieves a list of all animes in the database.",
        responses: {
          200: {
            description: "A list of animes",
            schema: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  id: { type: "string", example: "-uniqueGeneratedId" },
                  name: { type: "string", example: "Naruto" },
                  yearOfCreation: { type: "integer", example: 2002 },
                  topCharacters: {
                    type: "array",
                    items: { type: "string" },
                    example: [
                      "Naruto Uzumaki",
                      "Sasuke Uchiha",
                      "Sakura Haruno",
                      "Kakashi Hatake",
                      "Itachi Uchiha",
                    ],
                  },
                },
              },
            },
          },
          500: {
            description: "Internal server error",
          },
        },
      },
      post: {
        tags: ["Animes"],
        summary: "Create a new anime " + count(),
        description: "Adds a new anime to the database.",
        parameters: [
          {
            in: "body",
            name: "body",
            description: "Anime object that needs to be added to the database",
            required: true,
            schema: {
              type: "object",
              properties: {
                name: {
                  type: "string",
                  example: "Naruto",
                },
                yearOfCreation: {
                  type: "integer",
                  example: 2002,
                },
                topCharacters: {
                  type: "array",
                  items: {
                    type: "string",
                  },
                  example: [
                    "Naruto Uzumaki",
                    "Sasuke Uchiha",
                    "Sakura Haruno",
                    "Kakashi Hatake",
                    "Itachi Uchiha",
                  ],
                },
              },
              required: ["name", "yearOfCreation", "topCharacters"],
            },
          },
        ],
        responses: {
          201: {
            description: "Anime created successfully",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "Anime added successfully!",
                },
                anime: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      example: "-uniqueGeneratedId",
                    },
                    name: {
                      type: "string",
                      example: "Naruto",
                    },
                    yearOfCreation: {
                      type: "integer",
                      example: 2002,
                    },
                    topCharacters: {
                      type: "array",
                      items: {
                        type: "string",
                      },
                      example: [
                        "Naruto Uzumaki",
                        "Sasuke Uchiha",
                        "Sakura Haruno",
                        "Kakashi Hatake",
                        "Itachi Uchiha",
                      ],
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Invalid input",
            schema: {
              type: "object",
              properties: {
                errors: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                      },
                      param: {
                        type: "string",
                      },
                      location: {
                        type: "string",
                      },
                    },
                  },
                },
              },
            },
          },
          500: {
            description: "Internal server error",
          },
        },
      },
    },
    "/animes/{id}": {
      get: {
        tags: ["Animes"],
        summary: "Get a specific anime by ID " + count(),
        description: "Retrieve a specific anime from the database by its ID.",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of the anime to retrieve",
            required: true,
            type: "string",
          },
        ],
        responses: {
          200: {
            description: "A specific anime",
            schema: {
              type: "object",
              properties: {
                id: { type: "string", example: "-uniqueGeneratedId" },
                name: { type: "string", example: "Naruto" },
                yearOfCreation: { type: "integer", example: 2002 },
                topCharacters: {
                  type: "array",
                  items: { type: "string" },
                  example: [
                    "Naruto Uzumaki",
                    "Sasuke Uchiha",
                    "Sakura Haruno",
                    "Kakashi Hatake",
                    "Itachi Uchiha",
                  ],
                },
              },
            },
          },
          404: {
            description: "Anime not found",
          },
          500: {
            description: "Internal server error",
          },
        },
      },
      put: {
        tags: ["Animes"],
        summary: "Update an existing anime " + count(),
        description: "Updates an existing anime in the database.",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of the anime to update",
            required: true,
            type: "string",
          },
          {
            in: "body",
            name: "body",
            description: "Anime object that needs to be updated",
            required: true,
            schema: {
              type: "object",
              properties: {
                name: {
                  type: "string",
                  example: "Naruto Shippuden",
                },
                yearOfCreation: {
                  type: "integer",
                  example: 2007,
                },
                topCharacters: {
                  type: "array",
                  items: {
                    type: "string",
                  },
                  example: [
                    "Naruto Uzumaki",
                    "Sasuke Uchiha",
                    "Sakura Haruno",
                    "Kakashi Hatake",
                    "Itachi Uchiha",
                  ],
                },
              },
            },
          },
        ],
        responses: {
          200: {
            description: "Anime updated successfully",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "Anime updated successfully!",
                },
                anime: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      example: "-uniqueGeneratedId",
                    },
                    name: {
                      type: "string",
                      example: "Naruto Shippuden",
                    },
                    yearOfCreation: {
                      type: "integer",
                      example: 2007,
                    },
                    topCharacters: {
                      type: "array",
                      items: {
                        type: "string",
                      },
                      example: [
                        "Naruto Uzumaki",
                        "Sasuke Uchiha",
                        "Sakura Haruno",
                        "Kakashi Hatake",
                        "Itachi Uchiha",
                      ],
                    },
                  },
                },
              },
            },
          },
          400: {
            description: "Invalid input",
            schema: {
              type: "object",
              properties: {
                errors: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      msg: {
                        type: "string",
                      },
                      param: {
                        type: "string",
                      },
                      location: {
                        type: "string",
                      },
                    },
                  },
                },
              },
            },
          },
          404: {
            description: "Anime not found",
          },
          500: {
            description: "Internal server error",
          },
        },
      },
      delete: {
        tags: ["Animes"],
        summary: "Delete an anime " + count(),
        description: "Deletes an anime from the database.",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of the anime to delete",
            required: true,
            type: "string",
          },
        ],
        responses: {
          200: {
            description: "Anime deleted successfully",
            schema: {
              type: "object",
              properties: {
                message: {
                  type: "string",
                  example: "Anime deleted successfully!",
                },
              },
            },
          },
          404: {
            description: "Anime not found",
          },
          500: {
            description: "Internal server error",
          },
        },
      },
    },
    "/level1": {
      get: {
        tags: ["FOR Challenger"],
        summary: "challenger for   " + count(),
        description: "",
        responses: {
          200: {
          },
          500: {
            description: "Internal server error",
          },
        },
      },
    },
    "/level2": {
      get: {
        tags: ["FOR Challenger"],
        summary: "challenger for   " + count(),
        description: "",
        responses: {
          200: {
          },
          500: {
            description: "Internal server error",
          },
        },
      },
    },
  },
  components: {
    schemas: {
      Client: {
        type: "object",
        properties: {
          id: {
            type: "integer",
            format: "int64",
            description: "ID √∫nico do cliente",
          },
          name: {
            type: "string",
            description: "Nome completo do cliente",
          },
          cpf: {
            type: "string",
            description: "CPF do cliente sem pontos ou tra√ßos",
          },
          card: {
            type: "object",
            properties: {
              flag: {
                type: "string",
                enum: ["MASTER", "VISA"],
                description: "Bandeira do cart√£o de cr√©dito do cliente",
              },
              credit: {
                type: "number",
                format: "float",
                description: "Valor de cr√©dito dispon√≠vel para o cliente",
              },
            },
          },
        },
      },
      Products: {
        type: "object",
        required: ["id", "name", "description", "price"],
        properties: {
          id: {
            type: "integer",
            format: "int64",
            description: "Identificador √∫nico do produto",
          },
          name: {
            type: "string",
            description: "Nome do produto",
          },
          description: {
            type: "string",
            description: "Descri√ß√£o do produto",
          },
          price: {
            type: "integer",
            description:
              "Pre√ßo do produto em centavos, representando custos associados",
          },
        },
      },
      Employee: {
        type: "object",
        properties: {
          employeeId: {
            type: "integer",
            description: "ID do funcion√°rio",
          },
          name: {
            type: "string",
            description: "Nome do funcion√°rio",
          },
          position: {
            type: "string",
            description: "Cargo do funcion√°rio",
          },
          email: {
            type: "string",
            format: "email",
            description: "Email v√°lido do funcion√°rio",
          },
        },
      },
      Service: {
        type: "object",
        properties: {
          serviceId: {
            type: "integer",
            description: "ID do servi√ßo",
          },
          serviceName: {
            type: "string",
            description: "Nome do servi√ßo",
          },
          serviceDescription: {
            type: "string",
            description: "Descri√ß√£o detalhada do servi√ßo",
          },
        },
      },
      Company: {
        type: "object",
        properties: {
          id: {
            type: "integer",
            description: "ID da empresa",
          },
          name: {
            type: "string",
            description: "Nome da empresa",
          },
          address: {
            type: "string",
            description: "Endere√ßo da empresa",
          },
          services: {
            type: "array",
            items: {
              type: "object",
              properties: {
                serviceId: {
                  type: "integer",
                  description: "ID do servi√ßo",
                },
                serviceName: {
                  type: "string",
                  description: "Nome do servi√ßo",
                },
                serviceDescription: {
                  type: "string",
                  description: "Descri√ß√£o do servi√ßo",
                },
              },
            },
            description: "Lista de servi√ßos oferecidos pela empresa",
          },
        },
      },
      Heroi: {
        type: "object",
        properties: {
          id: {
            type: "integer",
            example: 1,
          },
          nome: {
            type: "string",
            example: "Homem-Sombra",
          },
          habilidade: {
            type: "string",
            example: "Pode se transformar em uma sombra",
          },
          problema: {
            type: "string",
            example:
              "S√≥ pode usar seus poderes em √°reas bem iluminadas, ficando invis√≠vel",
          },
        },
      },
      HeroiResponse: {
        type: "object",
        properties: {
          message: {
            type: "string",
            example: "Her√≥i adicionado com sucesso",
          },
          newUser: {
            $ref: "#/components/schemas/Heroi",
          },
        },
      },
      Erro: {
        type: "object",
        properties: {
          message: {
            type: "string",
            example: "Erro de valida√ß√£o",
          },
          errors: {
            type: "array",
            items: {
              type: "object",
              properties: {
                msg: {
                  type: "string",
                  example: "O campo nome √© obrigat√≥rio",
                },
                param: {
                  type: "string",
                  example: "nome",
                },
                location: {
                  type: "string",
                  example: "body",
                },
              },
            },
          },
        },
      },
      Mensagem: {
        type: "object",
        properties: {
          message: {
            type: "string",
            example: "Her√≥i com ID 1 foi removido com sucesso.",
          },
        },
      },
    },
  },
  definitions: {
    Mercado: {
      type: "object",
      required: ["nome", "cnpj", "endereco"],
      properties: {
        nome: {
          type: "string",
        },
        cnpj: {
          type: "string",
        },
        endereco: {
          type: "string",
        },
      },
    },
    Fruta: {
      type: "object",
      required: ["nome", "valor"],
      properties: {
        nome: {
          type: "string",
          example: "Ma√ß√£",
        },
        valor: {
          type: "integer",
          example: 5,
          description: "Valor deve ser um n√∫mero inteiro e n√£o negativo",
        },
      },
    },
    Produtos: {
      type: "object",
      properties: {
        nome: {
          type: "string",
          example: "Ma√ß√£",
        },
        valor: {
          type: "integer",
          example: 3,
          description: "Valor do produto em reais.",
        },
      },
    },
    CategoriaProduto: {
      type: "object",
      properties: {
        frutas: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        legumes: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        doces: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        salgados: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        bovinos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        suinos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        aves: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        queijos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        embutidos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        outros_frios: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        graos_cereais: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        massas: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        farinhas: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        conservados_enlatados: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        oleos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        temperos_condimentos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        com_alcool: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        sem_alcool: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        doces_congelados: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        salgados_congelados: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        higiene: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        limpeza: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        cozinha_util_domestica: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        diversos_util_domestica: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        telefonia: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        outros_eletronicos: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        alimentos_petShop: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        acessorios_petShop: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        higiene_petShop: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        medicamentos_livre: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        cuidado_pessoal: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        outros_farmacia: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        material_escolar: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        decoracao: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        outros_bazar_papelaria: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        peixes: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
        frutos_do_mar: {
          type: "array",
          items: {
            $ref: "#/definitions/Produtos",
          },
        },
      },
    },
  },
};

export default swaggerDocument;
// "/exmample":{
// 	get:{
// 		tags: ["Others"],
//         summary: "JSON com profundidade de valida√ß√µes" + count(),
//         description: "JSON para treino de valida√ß√£o",
// 		parameters:[{
// 			name: "body",
// 			in: "body",
// 			schema:{}
// 		}],
// 		responses: {
// 			200: {
// 			  description: "success",
// 			},
// 		  },
// 	}
// }
